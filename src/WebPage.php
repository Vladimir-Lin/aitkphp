<?php
//////////////////////////////////////////////////////////////////////////////
// AITK頂層網域元件
//////////////////////////////////////////////////////////////////////////////
namespace AITK                                                               ;
//////////////////////////////////////////////////////////////////////////////
class WebPage extends Columns                                                {
//////////////////////////////////////////////////////////////////////////////
public $Id                                                                   ;
public $Uuid                                                                 ;
public $Used                                                                 ;
public $URL                                                                  ;
public $Name                                                                 ;
public $Reverse                                                              ;
public $Path                                                                 ;
public $Update                                                               ;
public $Protocol                                                             ;
public $Port                                                                 ;
public $Hostname                                                             ;
public $TLD                                                                  ;
public $SLD                                                                  ;
public $DomainUuid                                                           ;
public $HostUuid                                                             ;
public $UrlUuid                                                              ;
public $Tables                                                               ;
//////////////////////////////////////////////////////////////////////////////
function __construct  ( )                                                    {
  parent::__construct ( )                                                    ;
  $this -> clear      ( )                                                    ;
}
//////////////////////////////////////////////////////////////////////////////
function __destruct  ( )                                                     {
  parent::__destruct ( )                                                     ;
}
//////////////////////////////////////////////////////////////////////////////
// +| clear |+ Begin - 2020-08-08T06:22:01
//////////////////////////////////////////////////////////////////////////////
public function clear ( )                                                    {
  ////////////////////////////////////////////////////////////////////////////
  $this -> Id         = 0                                                    ;
  $this -> Uuid       = 0                                                    ;
  $this -> Used       = 1                                                    ;
  $this -> URL        = 0                                                    ;
  $this -> Name       = ""                                                   ;
  $this -> Reverse    = ""                                                   ;
  $this -> Path       = ""                                                   ;
  $this -> Update     = ""                                                   ;
  ////////////////////////////////////////////////////////////////////////////
  $this -> Protocol   = "http"                                               ;
  $this -> Port       = 80                                                   ;
  $this -> Hostname   = ""                                                   ;
  $this -> TLD        = 0                                                    ;
  $this -> SLD        = 0                                                    ;
  $this -> DomainUuid = 0                                                    ;
  $this -> HostUuid   = 0                                                    ;
  $this -> UrlUuid    = 0                                                    ;
  $this -> Tables     = array ( )                                            ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| clear |- Final - 2020-08-08T06:22:01
//////////////////////////////////////////////////////////////////////////////
// +| assign |+ Begin - 2020-08-08T06:31:05
//////////////////////////////////////////////////////////////////////////////
public function assign ( $Item )                                             {
  $this -> Id      = $Item -> Id                                             ;
  $this -> Uuid    = $Item -> Uuid                                           ;
  $this -> Used    = $Item -> Used                                           ;
  $this -> URL     = $Item -> URL                                            ;
  $this -> Name    = $Item -> Name                                           ;
  $this -> Reverse = $Item -> Reverse                                        ;
  $this -> Path    = $Item -> Path                                           ;
  $this -> Update  = $Item -> Update                                         ;
}
//////////////////////////////////////////////////////////////////////////////
// -| assign |- Final - 2020-08-08T06:31:05
//////////////////////////////////////////////////////////////////////////////
// +| tableItems |+ Begin - 2020-08-08T06:51:13
//////////////////////////////////////////////////////////////////////////////
public function tableItems ( )                                               {
  return                                                                     [
    "id"                                                                     ,
    "uuid"                                                                   ,
    "used"                                                                   ,
    "url"                                                                    ,
    "name"                                                                   ,
    "reverse"                                                                ,
    "path"                                                                   ,
    "ltime"                                                                  ,
  ]                                                                          ;
}
//////////////////////////////////////////////////////////////////////////////
// -| tableItems |- Final - 2020-08-08T06:51:13
//////////////////////////////////////////////////////////////////////////////
// +| JoinItems |+ Begin - 2020-08-08T07:47:23
//////////////////////////////////////////////////////////////////////////////
public function JoinItems ( $X , $S = ","                                  ) {
  ////////////////////////////////////////////////////////////////////////////
  $U = array              (                                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                 ( $X as $V                                       ) {
    $W = "`{$V}`"                                                            ;
    array_push            ( $U , $W                                        ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $L = implode            ( $S , $U                                        ) ;
  unset                   ( $U                                             ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $L                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| JoinItems |- Final - 2020-08-08T07:47:23
//////////////////////////////////////////////////////////////////////////////
// +| Items |+ Begin - 2020-08-08T07:47:29
//////////////////////////////////////////////////////////////////////////////
public function Items      ( $S = ","                                      ) {
  $X = $this -> tableItems (                                               ) ;
  $L = $this -> JoinItems  ( $X , $S                                       ) ;
  unset                    ( $X                                            ) ;
  return $L                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| Items |- Final - 2020-08-08T07:47:29
//////////////////////////////////////////////////////////////////////////////
// +| valueItems |+ Begin - 2020-08-08T06:56:50
//////////////////////////////////////////////////////////////////////////////
public function valueItems ( )                                               {
  return                                                                     [
    "used"                                                                   ,
    "url"                                                                    ,
    "name"                                                                   ,
    "reverse"                                                                ,
    "path"                                                                   ,
  ]                                                                          ;
}
//////////////////////////////////////////////////////////////////////////////
// -| valueItems |- Final - 2020-08-08T06:56:50
//////////////////////////////////////////////////////////////////////////////
// +| set |+ Begin - 2020-08-08T08:02:52
//////////////////////////////////////////////////////////////////////////////
public function set ( $item , $V )                                           {
  ////////////////////////////////////////////////////////////////////////////
  $a   = strtolower ( $item      )                                           ;
  ////////////////////////////////////////////////////////////////////////////
  if ( "id"      == $a ) $this -> Id      = $V                               ;
  if ( "uuid"    == $a ) $this -> Uuid    = $V                               ;
  if ( "used"    == $a ) $this -> Used    = $V                               ;
  if ( "url"     == $a ) $this -> URL     = $V                               ;
  if ( "name"    == $a ) $this -> Name    = $V                               ;
  if ( "reverse" == $a ) $this -> Reverse = $V                               ;
  if ( "path"    == $a ) $this -> Path    = $V                               ;
  if ( "ltime"   == $a ) $this -> Update  = $V                               ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| set |- Final - 2020-08-08T08:02:52
//////////////////////////////////////////////////////////////////////////////
// +| get |+ Begin - 2020-08-08T08:02:56
//////////////////////////////////////////////////////////////////////////////
public function get ( $item )                                                {
  $a = strtolower ( $item )                                                  ;
  if ( "id"      == $a ) return (string) $this -> Id                         ;
  if ( "uuid"    == $a ) return (string) $this -> Uuid                       ;
  if ( "used"    == $a ) return (string) $this -> Used                       ;
  if ( "url"     == $a ) return (string) $this -> URL                        ;
  if ( "name"    == $a ) return (string) $this -> Name                       ;
  if ( "reverse" == $a ) return (string) $this -> Reverse                    ;
  if ( "path"    == $a ) return (string) $this -> Path                       ;
  if ( "ltime"   == $a ) return (string) $this -> Update                     ;
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| get |- Final - 2020-08-08T08:02:56
//////////////////////////////////////////////////////////////////////////////
// +| Pair |+ Begin - 2020-08-08T06:57:41
//////////////////////////////////////////////////////////////////////////////
public function Pair ( $item )                                               {
  return "`{$item}` = " . $this -> get ( $item )                             ;
}
//////////////////////////////////////////////////////////////////////////////
// -| Pair |- Final - 2020-08-08T06:57:41
//////////////////////////////////////////////////////////////////////////////
// +| Pairs |+ Begin - 2020-08-08T06:57:47
//////////////////////////////////////////////////////////////////////////////
public function Pairs ( $Items                                             ) {
  $P = array          (                                                    ) ;
  foreach             ( $Items as $item                                    ) {
    array_push        ( $P    , $this -> Pair ( $item )                    ) ;
  }                                                                          ;
  $Q = implode        ( " , " , $P                                         ) ;
  unset               ( $P                                                 ) ;
  return $Q                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| Pairs |- Final - 2020-08-08T06:57:47
//////////////////////////////////////////////////////////////////////////////
// +| ItemPair |+ Begin - 2020-08-08T08:02:09
//////////////////////////////////////////////////////////////////////////////
public function ItemPair ( $item )                                           {
  $a = strtolower ( $item )                                                  ;
  if ( "id"        == $a )                                                   {
    return "`{$a}` = " . (string) $this -> Id                                ;
  }                                                                          ;
  if ( "uuid"      == $a )                                                   {
    return "`{$a}` = " . (string) $this -> Uuid                              ;
  }                                                                          ;
  if ( "used"      == $a )                                                   {
    return "`{$a}` = " . (string) $this -> Used                              ;
  }                                                                          ;
  if ( "url"       == $a )                                                   {
    return "`{$a}` = " . (string) $this -> URL                               ;
  }                                                                          ;
  if ( "name"      == $a )                                                   {
    return "`{$a}` = " . (string) $this -> Name                              ;
  }                                                                          ;
  if ( "reverse"   == $a )                                                   {
    return "`{$a}` = " . (string) $this -> Reverse                           ;
  }                                                                          ;
  if ( "path"      == $a )                                                   {
    return "`{$a}` = " . (string) $this -> Path                              ;
  }                                                                          ;
  if ( "ltime"     == $a )                                                   {
    return "`{$a}` = " . (string) $this -> Update                            ;
  }                                                                          ;
  return ""                                          ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ItemPair |- Final - 2020-08-08T08:02:09
//////////////////////////////////////////////////////////////////////////////
// +| obtain |+ Begin - 2020-08-08T06:38:48
//////////////////////////////////////////////////////////////////////////////
public function obtain ( $R )                                                {
  ////////////////////////////////////////////////////////////////////////////
  $this -> Id      = $R [ "id"      ]                                        ;
  $this -> Uuid    = $R [ "uuid"    ]                                        ;
  $this -> Used    = $R [ "used"    ]                                        ;
  $this -> URL     = $R [ "url"     ]                                        ;
  $this -> Name    = $R [ "name"    ]                                        ;
  $this -> Reverse = $R [ "reverse" ]                                        ;
  $this -> Path    = $R [ "path"    ]                                        ;
  $this -> Update  = $R [ "ltime"   ]                                        ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| obtain |- Final - 2020-08-08T06:38:48
//////////////////////////////////////////////////////////////////////////////
// +| ObtainsByUuid |+ Begin - 2020-08-08T06:15:54
//////////////////////////////////////////////////////////////////////////////
public function ObtainsByUuid ( $DB , $TABLE                               ) {
  ////////////////////////////////////////////////////////////////////////////
  $IT = $this -> Items        (                                            ) ;
  $WH = $DB   -> WhereUuid    ( $this -> Uuid , true                       ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ = "select {$IT} from {$TABLE} {$WH}"                                   ;
  $qq = $DB   -> Query        ( $QQ                                        ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( $DB -> hasResult ( $qq )                   ) {
    $rr = $qq -> fetch_array  ( MYSQLI_BOTH                                ) ;
    $this     -> obtain       ( $rr                                        ) ;
    return true                                                              ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return false                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ObtainsByUuid |- Final - 2020-08-08T06:15:54
//////////////////////////////////////////////////////////////////////////////
public function setPage            ( $PAGE                                 ) {
  ////////////////////////////////////////////////////////////////////////////
  if                               ( strlen ( $PAGE ) <= 0                 ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $R                  = parse_url  ( $PAGE                                 ) ;
  if                               ( $R === false                          ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $this -> Name       = $PAGE                                                ;
  $this -> Reverse    = strrev     ( $PAGE                                 ) ;
  $this -> Path       = ""                                                   ;
  $this -> Protocol   = $R         [ "scheme"                              ] ;
  $this -> Port       = intval     ( $R [ "port" ] , 10                    ) ;
  $this -> Hostname   = $R         [ "host"                                ] ;
  ////////////////////////////////////////////////////////////////////////////
  $ZPATH              = $R         [ "path"                                ] ;
  $IDX                = strpos     ( $PAGE , $ZPATH                        ) ;
  $ZPATH              = $PAGE                                                ;
  ////////////////////////////////////////////////////////////////////////////
  if                               ( $IDX > 0                              ) {
    //////////////////////////////////////////////////////////////////////////
    $X                = $PAGE                                                ;
    $ZPATH            = substr     ( $X , $IDX                             ) ;
    $V                = substr     ( $X , 0    , $IDX                      ) ;
    $F                = strtolower ( $V                                    ) ;
    $this -> Name     = "{$F}{$ZPATH}"                                       ;
    $this -> Reverse  = strrev     ( $this -> Name                         ) ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $this -> Path       = $ZPATH                                               ;
  ////////////////////////////////////////////////////////////////////////////
  $this -> DecidePort              (                                       ) ;
  ////////////////////////////////////////////////////////////////////////////
  return true                                                                ;
}
//////////////////////////////////////////////////////////////////////////////
public function DecidePort    (                                            ) {
  ////////////////////////////////////////////////////////////////////////////
  switch                      ( $this -> Protocol                          ) {
    case "http"                                                              :
      $this -> Port =  80                                                    ;
    break                                                                    ;
    case "https"                                                             :
      $this -> Port = 443                                                    ;
    break                                                                    ;
    case "ftp"                                                               :
      $this -> Port =  21                                                    ;
    break                                                                    ;
    default                                                                  :
      $this -> Port =   0                                                    ;
    break                                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
public function isProtocol    (                                            ) {
  return                      ( strlen ( $this -> Protocol )               ) ;
}
//////////////////////////////////////////////////////////////////////////////
public function LookForTLD    ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $H       = $this -> Hostname                                               ;
  if                          ( strlen ( $H ) <= 0                         ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $R       = strrev           ( $H                                         ) ;
  $T       = explode          ( "." , $R                                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( count ( $T ) <= 0                          ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $W       = $T               [ 0                                          ] ;
  ////////////////////////////////////////////////////////////////////////////
  $TLDTAB  = $this -> Tables  [ "TLD"                                      ] ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "select `id`,`type` from {$TLDTAB}"                             .
             " where ( `reverse` = '{$W}' ) ;"                               ;
  $qq      = $DB -> Query     ( $QQ                                        ) ;
  if                          ( ! $DB -> hasResult ( $qq )                 ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $rr      = $qq -> fetch_array ( MYSQLI_BOTH )                              ;
  $ID      = $rr              [ 0                                          ] ;
  $TYPE    = $rr              [ 1                                          ] ;
  ////////////////////////////////////////////////////////////////////////////
  return array                ( "Id" => $ID , "Type" => $TYPE ,            ) ;
}
//////////////////////////////////////////////////////////////////////////////
public function LookForSLD    ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $H       = $this -> Hostname                                               ;
  if                          ( strlen ( $H ) <= 0                         ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $R       = strrev           ( $H                                         ) ;
  $T       = explode          ( "." , $R                                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( count ( $T ) <= 1                          ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $W       = $T               [ 0                                          ] ;
  $X       = $T               [ 1                                          ] ;
  $C       = "{$W}.{$X}"                                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $SLDTAB  = $this -> Tables  [ "SLD"                                      ] ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "select `id` from {$SLDTAB}"                                    .
             " where ( `reverse` = '{$C}' ) ;"                               ;
  $qq      = $DB -> Query     ( $QQ                                        ) ;
  if                          ( ! $DB -> hasResult ( $qq )                 ) {
    return false                                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $rr      = $qq -> fetch_array ( MYSQLI_BOTH )                              ;
  $ID      = $rr              [ 0                                          ] ;
  ////////////////////////////////////////////////////////////////////////////
  return $ID                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
public function LookForDomain ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $CNT     = 2                                                               ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( $this -> SLD > 0                           ) {
    $CNT   = 3                                                               ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $H       = $this -> Hostname                                               ;
  if                          ( strlen ( $H ) <= 0                         ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $R       = strrev           ( $H                                         ) ;
  $T       = explode          ( "." , $R                                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( count ( $T ) <= $CNT                       ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $Z       =                  [                                            ] ;
  $LI      = 0                                                               ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                     ( $T as $S                                   ) {
    if                        ( $LI < $CNT                                 ) {
      array_push              ( $Z , $S                                    ) ;
    }                                                                        ;
    $LI    = $LI + 1                                                         ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $W       = implode          ( "." , $Z                                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DOMTAB  = $this -> Tables  [ "Domains"                                  ] ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "select `uuid` from {$DOMTAB}"                                  .
             " where ( `reverse` = '{$W}' ) ;"                               ;
  $qq      = $DB -> Query     ( $QQ                                        ) ;
  if                          ( ! $DB -> hasResult ( $qq )                 ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $rr      = $qq -> fetch_array ( MYSQLI_BOTH )                              ;
  $DUID    = $rr              [ 0                                          ] ;
  ////////////////////////////////////////////////////////////////////////////
  return $DUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function AppendDomain  ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $CNT     = 2                                                               ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( $this -> SLD > 0                           ) {
    $CNT   = 3                                                               ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $H       = $this -> Hostname                                               ;
  if                          ( strlen ( $H ) <= 0                         ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $R       = strrev           ( $H                                         ) ;
  $T       = explode          ( "." , $R                                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( count ( $T ) <= $CNT                       ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $Z       =                  [                                            ] ;
  $LI      = 0                                                               ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                     ( $T as $S                                   ) {
    if                        ( $LI < $CNT                                 ) {
      array_push              ( $Z , $S                                    ) ;
    }                                                                        ;
    $LI    = $LI + 1                                                         ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $W       = implode          ( "." , $Z                                   ) ;
  $V       = strrev           ( $W                                         ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DOMTAB  = $this -> Tables  [ "Domains"                                  ] ;
  ////////////////////////////////////////////////////////////////////////////
  $DUID    = $DB -> LastUuid  ( $DOMTAB , "uuid" , 8310000000000000000     ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "insert into {$DOMTAB} ( `uuid`,`name` )"                       .
             " values ( {$DUID} , ? ) ;"                                     ;
  $qq      = $DB -> Prepare   ( $QQ                                        ) ;
  $qq     -> bind_param       ( 's' , $V                                   ) ;
  $qq     -> execute          (                                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $DUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function LookForHost     ( $DB                                      ) {
  ////////////////////////////////////////////////////////////////////////////
  $HSTTAB  = $this -> Tables    [ "Hosts"                                  ] ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "select `uuid` from {$HSTTAB}"                                  .
             " where ( `name` = ? ) ;"                                       ;
  $qq      = $DB -> Prepare     ( $QQ                                      ) ;
  $qq     -> bind_param         ( 's' , $this -> Hostname                  ) ;
  $qq     -> execute            (                                          ) ;
  $kk      = $qq -> get_result  (                                          ) ;
  if                            ( ! $DB -> hasResult ( $kk )               ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $rr      = $kk -> fetch_array ( MYSQLI_BOTH                              ) ;
  $HUID    = $rr                [ 0                                        ] ;
  ////////////////////////////////////////////////////////////////////////////
  return $HUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function AppendHost    ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $HSTTAB  = $this -> Tables  [ "Hosts"                                    ] ;
  $HUID    = $DB -> LastUuid  ( $HSTTAB , "uuid" , 8370000000000000000     ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DUID    = $this -> DomainUuid                                             ;
  $NAME    = $this -> Hostname                                               ;
  $REVERSE = strrev           ( $NAME                                      ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "insert into {$HSTTAB}"                                         .
             " ( `uuid`,`domain`,`name`,`reverse` )"                         .
             " values ( {$HUID} , {$DUID} , ? , ? ) ;"                       ;
  $qq      = $DB -> Prepare   ( $QQ                                        ) ;
  $qq     -> bind_param       ( 'ss' , $NAME , $REVERSE                    ) ;
  $qq     -> execute          (                                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $HUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function LookForURL      ( $DB                                      ) {
  ////////////////////////////////////////////////////////////////////////////
  $HUID     = $this -> HostUuid                                              ;
  $PROTOCOL = $this -> Protocol                                              ;
  $PORT     = $this -> Port                                                  ;
  $HOST     = $this -> Hostname                                              ;
  ////////////////////////////////////////////////////////////////////////////
  $URLTAB   = $this -> Tables   [ "URLs"                                   ] ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ       = "select `uuid` from {$URLTAB}"                                 .
              " where ( `host` = {$HUID} )"                                  .
              " and ( `protocol` = ? )"                                      .
              " and ( `port` = {$PORT} )"                                    .
              " and ( `name` = ? ) ;"                                        ;
  $qq       = $DB -> Prepare    ( $QQ                                      ) ;
  $qq      -> bind_param        ( 's' , $PROTOCOL , $HOST                  ) ;
  $qq      -> execute           (                                          ) ;
  $kk       = $qq -> get_result (                                          ) ;
  if                            ( ! $DB -> hasResult ( $kk )               ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $rr      = $kk -> fetch_array ( MYSQLI_BOTH )                              ;
  $UUID    = $rr              [ 0                                          ] ;
  ////////////////////////////////////////////////////////////////////////////
  return $UUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function AppendURL     ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $URLTAB   = $this -> Tables [ "URLs"                                     ] ;
  $UUID     = $DB -> LastUuid ( $URLTAB , "uuid" , 8320000000000000000     ) ;
  ////////////////////////////////////////////////////////////////////////////
  $HUID     = $this -> HostUuid                                              ;
  $PROTOCOL = $this -> Protocol                                              ;
  $PORT     = $this -> Port                                                  ;
  $NAME     = $this -> Hostname                                              ;
  $REVERSE  = strrev          ( $NAME                                      ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "insert into {$URLTAB}"                                         .
             " ( `uuid` , `host` , `protocol` , `port` , `name` , `reverse` )" .
             " values ( {$UUID} , {$HUID} , ? , {$PORT} , ? , ? ) ;"         ;
  $qq      = $DB -> Prepare   ( $QQ                                        ) ;
  $qq     -> bind_param       ( 'sss' , $PROTOCOL , $NAME , $REVERSE       ) ;
  $qq     -> execute          (                                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $UUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function LookForPage   ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $WPGTAB  = $this -> Tables  [ "Webpages"                                 ] ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "select `uuid` from {$WPGTAB}"                                  .
             " where ( `name` = ? ) ;"                                       ;
  $qq      = $DB -> Prepare   ( $QQ                                        ) ;
  $qq     -> bind_param       ( 's' , $this -> Name                        ) ;
  $qq     -> execute          (                                            ) ;
  $kk   = $qq -> get_result (                                              ) ;
  if                          ( ! $DB -> hasResult ( $kk )                 ) {
    return 0                                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $rr      = $kk -> fetch_array ( MYSQLI_BOTH )                              ;
  $PUID    = $rr              [ 0                                          ] ;
  ////////////////////////////////////////////////////////////////////////////
  return $PUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function AppendPage    ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $WPGTAB  = $this -> Tables  [ "Webpages"                                 ] ;
  $UUID    = $DB -> LastUuid  ( $WPGTAB , "uuid" , 8380000000000000000     ) ;
  ////////////////////////////////////////////////////////////////////////////
  $URID    = $this -> UrlUuid                                                ;
  $NAME    = $this -> Name                                                   ;
  $REVERSE = $this -> Reverse                                                ;
  $PATH    = $this -> Path                                                   ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ      = "insert into {$WPGTAB}"                                         .
             " ( `uuid`,`url`,`name`,`reverse`,`path` )"                     .
             " values ( {$UUID} , {$URID} , ? , ? , ? ) ;"                   ;
  $qq      = $DB -> Prepare   ( $QQ                                        ) ;
  $qq     -> bind_param       ( 'sss' , $NAME , $REVERSE , $PATH           ) ;
  $qq     -> execute          (                                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $UUID                                                               ;
}
//////////////////////////////////////////////////////////////////////////////
public function Assure        ( $DB                                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $ANSWER         = false                                                    ;
  $this -> Uuid   = $this -> LookForPage ( $DB )                             ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( gmp_cmp ( $this -> Uuid , 0 ) > 0          ) {
    return true                                                              ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TLDTAB         = $this -> Tables [ "TLD"                                ] ;
  $SLDTAB         = $this -> Tables [ "SLD"                                ] ;
  $DOMTAB         = $this -> Tables [ "Domains"                            ] ;
  $HSTTAB         = $this -> Tables [ "Hosts"                              ] ;
  $URLTAB         = $this -> Tables [ "URLs"                               ] ;
  $WPGTAB         = $this -> Tables [ "Webpages"                           ] ;
  ////////////////////////////////////////////////////////////////////////////
  $DB -> LockWrites           ( [ $TLDTAB                                    ,
                                  $SLDTAB                                    ,
                                  $DOMTAB                                    ,
                                  $HSTTAB                                    ,
                                  $URLTAB                                    ,
                                  $WPGTAB                              , ] ) ;
  ////////////////////////////////////////////////////////////////////////////
  $R              = $this -> LookForTLD ( $DB )                              ;
  if                          ( $R != false                                ) {
    //////////////////////////////////////////////////////////////////////////
    $this   -> TLD = $R       [ "Id"                                       ] ;
    if                        ( $R [ "Type" ] == 7                         ) {
      $this -> SLD = $this -> LookForSLD ( $DB                             ) ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $D              = $this -> LookForDomain ( $DB )                           ;
  if                          ( gmp_cmp ( $D , 0 ) > 0                     ) {
    $this -> DomainUuid = $D                                                 ;
  } else                                                                     {
    $this -> DomainUuid = $this -> AppendDomain ( $DB )                      ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( gmp_cmp ( $this -> DomainUuid , 0 ) > 0    ) {
    //////////////////////////////////////////////////////////////////////////
    $H            = $this -> LookForHost ( $DB )                             ;
    if                        ( gmp_cmp ( $H , 0 ) > 0                     ) {
      $this -> HostUuid = $H                                                 ;
    } else                                                                   {
      $this -> HostUuid = $this -> AppendHost ( $DB )                        ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( gmp_cmp ( $this -> HostUuid , 0 ) > 0      ) {
    //////////////////////////////////////////////////////////////////////////
    $U            = $this -> LookForURL ( $DB )                              ;
    if                        ( gmp_cmp ( $U , 0 ) > 0                     ) {
      $this -> UrlUuid = $U                                                  ;
    } else                                                                   {
      $this -> UrlUuid = $this -> AppendURL ( $DB )                          ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                          ( gmp_cmp ( $this -> UrlUuid , 0 ) > 0       ) {
    //////////////////////////////////////////////////////////////////////////
    $this -> Uuid = $this -> AppendPage ( $DB )                              ;
    $ANSWER = true                                                           ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  $DB -> UnlockTables         (                                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $ANSWER                                                             ;
}
//////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
?>
