<?php
//////////////////////////////////////////////////////////////////////////////
// AITK頂層網域檢索元件
//////////////////////////////////////////////////////////////////////////////
namespace AITK                                                               ;
//////////////////////////////////////////////////////////////////////////////
class TLDs                                                                   {
//////////////////////////////////////////////////////////////////////////////
// +| Variables |+ Begin - 2020-08-08T12:10:02
//////////////////////////////////////////////////////////////////////////////
public $Names                                                                ;
public $Reverses                                                             ;
//////////////////////////////////////////////////////////////////////////////
public $NamesToIds                                                           ;
public $NamesToUuids                                                         ;
public $IdsToNames                                                           ;
public $UuidsToNames                                                         ;
//////////////////////////////////////////////////////////////////////////////
public $ReversesToIds                                                        ;
public $ReversesToUuids                                                      ;
public $IdsToReverses                                                        ;
public $UuidsToReverses                                                      ;
//////////////////////////////////////////////////////////////////////////////
// -| Variables |- Final - 2020-08-08T12:10:02
//////////////////////////////////////////////////////////////////////////////
function __construct  ( )                                                    {
  parent::__construct ( )                                                    ;
  $this -> clear      ( )                                                    ;
}
//////////////////////////////////////////////////////////////////////////////
function __destruct  ( )                                                     {
  parent::__destruct ( )                                                     ;
}
//////////////////////////////////////////////////////////////////////////////
// +| clear |+ Begin - 2020-08-08T12:10:07
//////////////////////////////////////////////////////////////////////////////
public function clear ( )                                                    {
  ////////////////////////////////////////////////////////////////////////////
  $this -> Names           = array ( )                                       ;
  $this -> Reverses        = array ( )                                       ;
  ////////////////////////////////////////////////////////////////////////////
  $this -> NamesToIds      = array ( )                                       ;
  $this -> NamesToUuids    = array ( )                                       ;
  $this -> IdsToNames      = array ( )                                       ;
  $this -> UuidsToNames    = array ( )                                       ;
  ////////////////////////////////////////////////////////////////////////////
  $this -> ReversesToIds   = array ( )                                       ;
  $this -> ReversesToUuids = array ( )                                       ;
  $this -> IdsToReverses   = array ( )                                       ;
  $this -> UuidsToReverses = array ( )                                       ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| clear |- Final - 2020-08-08T12:10:07
//////////////////////////////////////////////////////////////////////////////
// +| obtains |+ Begin - 2020-08-08T12:10:12
//////////////////////////////////////////////////////////////////////////////
public function obtains        ( $DB , $TABLE                              ) {
  ////////////////////////////////////////////////////////////////////////////
  $this       -> clear         (                                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ          = "select `id`,`uuid`,`name`,`reverse` from {$TABLE}"         .
                 " where ( `used` > 0 ) order by `id` asc ;"                 ;
  ////////////////////////////////////////////////////////////////////////////
  $qq          = $DB -> Query  ( $QQ                                       ) ;
  if                           ( $DB -> hasResult ( $qq )                  ) {
    while                      ( $rr = $qq -> fetch_array ( MYSQLI_BOTH )  ) {
      ////////////////////////////////////////////////////////////////////////
      $ID      = $rr [ 0 ]                                                   ;
      $UUID    = $rr [ 1 ]                                                   ;
      $N       = $rr [ 2 ]                                                   ;
      $R       = $rr [ 3 ]                                                   ;
      ////////////////////////////////////////////////////////////////////////
      $NAME    = strtolower ( $N )                                           ;
      $REVERSE = strtolower ( $R )                                           ;
      ////////////////////////////////////////////////////////////////////////
      array_push ( $this -> Names    , $NAME    )                            ;
      array_push ( $this -> Reverses , $REVERSE )                            ;
      ////////////////////////////////////////////////////////////////////////
      $this -> NamesToIds      [ $NAME    ] = $ID                            ;
      $this -> NamesToUuids    [ $NAME    ] = $UUID                          ;
      $this -> IdsToNames      [ $ID      ] = $NAME                          ;
      $this -> UuidsToNames    [ $UUID    ] = $NAME                          ;
      ////////////////////////////////////////////////////////////////////////
      $this -> ReversesToIds   [ $REVERSE ] = $ID                            ;
      $this -> ReversesToUuids [ $REVERSE ] = $UUID                          ;
      $this -> IdsToReverses   [ $ID      ] = $REVERSE                       ;
      $this -> UuidsToReverses [ $UUID    ] = $REVERSE                       ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return true                                                                ;
}
//////////////////////////////////////////////////////////////////////////////
// -| obtains |- Final - 2020-08-08T12:10:12
//////////////////////////////////////////////////////////////////////////////
// +| IdByName |+ Begin - 2020-08-08T12:10:18
//////////////////////////////////////////////////////////////////////////////
public function IdByName            ( $NAME                                ) {
  $TLD    = strtolower              ( $NAME                                ) ;
  if                                ( ! in_array ( $TLD , $this -> Names ) ) {
    return 0                                                                 ;
  }                                                                          ;
  return $this -> NamesToIds        [ $NAME                                ] ;
}
//////////////////////////////////////////////////////////////////////////////
// -| IdByName |- Final - 2020-08-08T12:10:18
//////////////////////////////////////////////////////////////////////////////
// +| UuidByName |+ Begin - 2020-08-08T12:10:22
//////////////////////////////////////////////////////////////////////////////
public function UuidByName          ( $NAME                                ) {
  $TLD    = strtolower              ( $NAME                                ) ;
  if                                ( ! in_array ( $TLD , $this -> Names ) ) {
    return 0                                                                 ;
  }                                                                          ;
  return $this -> NamesToUuids      [ $NAME                                ] ;
}
//////////////////////////////////////////////////////////////////////////////
// -| UuidByName |- Final - 2020-08-08T12:10:22
//////////////////////////////////////////////////////////////////////////////
// +| IdByReverse |+ Begin - 2020-08-08T12:10:28
//////////////////////////////////////////////////////////////////////////////
public function IdByReverse      ( $NAME                                   ) {
  $TLD    = strtolower           ( $NAME                                   ) ;
  if                             ( ! in_array ( $TLD , $this -> Reverses ) ) {
    return 0                                                                 ;
  }                                                                          ;
  return $this -> ReversesToIds  [ $NAME                                   ] ;
}
//////////////////////////////////////////////////////////////////////////////
// -| IdByReverse |- Final - 2020-08-08T12:10:28
//////////////////////////////////////////////////////////////////////////////
// +| UuidByReverse |+ Begin - 2020-08-08T12:10:32
//////////////////////////////////////////////////////////////////////////////
public function UuidByReverse    ( $NAME                                   ) {
  $TLD    = strtolower           ( $NAME                                   ) ;
  if                             ( ! in_array ( $TLD , $this -> Reverses ) ) {
    return 0                                                                 ;
  }                                                                          ;
  return $this -> ReversesToUuids [ $NAME                                  ] ;
}
//////////////////////////////////////////////////////////////////////////////
// -| UuidByReverse |- Final - 2020-08-08T12:10:32
//////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
?>
