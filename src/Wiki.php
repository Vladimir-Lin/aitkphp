<?php
//////////////////////////////////////////////////////////////////////////////
// AITK維基專用元件
//////////////////////////////////////////////////////////////////////////////
namespace AITK                                                               ;
use MatthiasMullie\Minify as Minify                                          ;
//////////////////////////////////////////////////////////////////////////////
class Wiki                                                                   {
//////////////////////////////////////////////////////////////////////////////
// +| RandomString |+
// 產生亂數
//////////////////////////////////////////////////////////////////////////////
public static function RandomString ( $PREFIX , $LENGTH                    ) {
  ////////////////////////////////////////////////////////////////////////////
  $L      = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" ;
  $S      = $PREFIX                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  while                             ( strlen ( $S ) < $LENGTH              ) {
    //////////////////////////////////////////////////////////////////////////
    $I    = rand                    ( 0  , 61                              ) ;
    $T    = substr                  ( $L , $I , 1                          ) ;
    $S    = "{$S}{$T}"                                                       ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return $S                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| RandomString |-
//////////////////////////////////////////////////////////////////////////////
// +| GetTag |+
// 取得關鍵字內容
//////////////////////////////////////////////////////////////////////////////
public static function GetTag ( $KEY , $TAGs                               ) {
  ////////////////////////////////////////////////////////////////////////////
  $K     = array_keys         ( $TAGs                                      ) ;
  $M     = strtolower         ( $KEY                                       ) ;
  foreach                     ( $K as $L                                   ) {
    $S   = strtolower         ( $L                                         ) ;
    if                        ( $S == $M                                   ) {
      return $TAGs [ $L ]                                                    ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetTag |-
//////////////////////////////////////////////////////////////////////////////
// +| GetFunction |+
// 取得函數
//////////////////////////////////////////////////////////////////////////////
public static function GetFunction ( $KEY , $argv , $Maps                  ) {
  ////////////////////////////////////////////////////////////////////////////
  $func = self::GetTag             ( $KEY , $argv                          ) ;
  if                               ( strlen ( $func ) <= 0                 ) {
    return ""                                                                ;
  }                                                                          ;
  $func = strtolower               ( $func                                 ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                               ( ! array_key_exists ( $func , $Maps )  ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return $Maps [ $func ]                                                     ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetFunction |-
//////////////////////////////////////////////////////////////////////////////
// +| GetVariables |+
// AITK參數
//////////////////////////////////////////////////////////////////////////////
public static function GetVariables ( $args , $argv , $Options             ) {
  ////////////////////////////////////////////////////////////////////////////
  if                                ( $args < 2                            ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $KEY         = $argv [ 1 ]                                                 ;
  $KEY         = strtolower         ( $KEY                                 ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                            ( $KEY                                 ) {
    //////////////////////////////////////////////////////////////////////////
    case "options"                                                           :
    return json_encode              ( $Options                             ) ;
    //////////////////////////////////////////////////////////////////////////
    case "site"                                                              :
      $IDX     = 2                                                           ;
      $OPT     = $Options                                                    ;
      while                         ( $IDX < $args                         ) {
        $K     = $argv [ $IDX ]                                              ;
        if                          ( is_array ( $OPT )                    ) {
          if                        ( ! array_key_exists ( $K , $OPT )     ) {
            return ""                                                        ;
          }                                                                  ;
        } else                                                               {
          return ""                                                          ;
        }                                                                    ;
        $OPT   = $OPT [ $K ]                                                 ;
        $IDX   = $IDX + 1                                                    ;
      }                                                                      ;
      if                            ( is_array ( $OPT )                    ) {
        return json_encode          ( $OPT                                 ) ;
      }                                                                      ;
    return $OPT                                                              ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetVariables |-
//////////////////////////////////////////////////////////////////////////////
// +| GetAstrophysics |+
// Astrophysics參數
//////////////////////////////////////////////////////////////////////////////
public static function GetAstrophysics ( $args , $argv , $Options          ) {
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( $args < 2                         ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $KEY         = $argv [ 1 ]                                                 ;
  $KEY         = strtolower            ( $KEY                              ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                               ( $KEY                              ) {
    //////////////////////////////////////////////////////////////////////////
    case "constant"                                                          :
    return ""                                                                ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetAstrophysics |-
//////////////////////////////////////////////////////////////////////////////
// +| InvalidOptions |+
// 錯誤參數
//////////////////////////////////////////////////////////////////////////////
public static function InvalidOptions ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $JSOX = json_encode                 ( $argv                              ) ;
  return "Invalid parameters : [ {$JSOX} ] - | {$Content} |"                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| InvalidOptions |-
//////////////////////////////////////////////////////////////////////////////
// +| GetCurrentDB |+
// 取得資料庫
//////////////////////////////////////////////////////////////////////////////
public static function GetCurrentDB  ( $argv , $Options                    ) {
  ////////////////////////////////////////////////////////////////////////////
  $DB          = $Options            [ "Database"                          ] ;
  $Databases   = $Options            [ "Databases"                         ] ;
  ////////////////////////////////////////////////////////////////////////////
  $DBN         = self::GetTag        ( "database" , $argv                  ) ;
  if                                 ( strlen ( $DBN ) > 0                 ) {
    if ( array_key_exists ( $DBN , $Databases )                            ) {
      $DB      = $Databases          [ $DBN                                ] ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return $DB                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetCurrentDB |-
//////////////////////////////////////////////////////////////////////////////
// +| GetAssignTable |+
// 取得資料庫表格名稱
//////////////////////////////////////////////////////////////////////////////
public static function GetAssignTable ( $DefaultTable , $argv , $Options   ) {
  ////////////////////////////////////////////////////////////////////////////
  $TAB   = $DefaultTable                                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $TBN   = self::GetTag               ( "table" , $argv                    ) ;
  if                                  ( strlen ( $TBN ) > 0                ) {
    $TAB = $TBN                                                              ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return $TAB                                                                ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetAssignTable |-
//////////////////////////////////////////////////////////////////////////////
// +| WildAJAX |+
public static function WildAJAX  ( $DB , $PICKDB , $HH , $AA , $Options    ) {
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Answer" ] = "No"                                                    ;
  ////////////////////////////////////////////////////////////////////////////
  if                             ( ! $HH -> hasParameter ( "Method"   )    ) {
    return $AA                                                               ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $METHOD     = $HH -> Parameter ( "Method"                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                         ( $METHOD                                 ) {
    case "Function"                                                          :
      ////////////////////////////////////////////////////////////////////////
      if                         ( ! $HH -> hasParameter ( "Function" )    ) {
        return $AA                                                           ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
      $FX     = $HH -> Parameter ( "Function"                              ) ;
      if                         ( strlen ( $FX ) > 0                      ) {
        if                       ( method_exists ( "\AITK\Wiki" , $FX )    ) {
          $AA = self::$FX        ( $DB , $PICKDB , $HH , $AA , $Options    ) ;
        }                                                                    ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
    break                                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| WildAJAX |-
//////////////////////////////////////////////////////////////////////////////
// +| ExportXML |+
// 輸出XML
//////////////////////////////////////////////////////////////////////////////
public static function ExportXML  ( $argv , $Content , $Options            ) {
  ////////////////////////////////////////////////////////////////////////////
  return $Content                                                            ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| ExportXML |-
//////////////////////////////////////////////////////////////////////////////
// +| ExportHTML |+
// 輸出HTML
//////////////////////////////////////////////////////////////////////////////
public static function ExportHTML ( $argv , $Content , $Options            ) {
  ////////////////////////////////////////////////////////////////////////////
  $TAG            = ""                                                       ;
  $PARAMETERS     = ""                                                       ;
  $NOTAIL         = 0                                                        ;
  ////////////////////////////////////////////////////////////////////////////
  $C              = array         (                                        ) ;
  $K              = array_keys    ( $argv                                  ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                         ( $K as $L                               ) {
    $S            = strtolower    ( $L                                     ) ;
    switch                        ( $S                                     ) {
      case "function"                                                        :
      break                                                                  ;
      case "tag"                                                             :
        $TAG      = $argv [ $L ]                                             ;
      break                                                                  ;
      case "notail"                                                          :
        $V        = $argv [ $L ]                                             ;
        if                        ( strlen ( $V ) <= 0                     ) {
          $NOTAIL = 1                                                        ;
        } else                                                               {
          $NOTAIL = $V                                                       ;
        }                                                                    ;
      break                                                                  ;
      default                                                                :
        $V        = $argv [ $L ]                                             ;
        $P        = "{$L}=\"{$V}\""                                          ;
        array_push                ( $C , $P                                ) ;
      break                                                                  ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                              ( count ( $C ) > 0                       ) {
    $PARAMETERS   = implode       ( " " , $C                               ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                              ( strlen ( $TAG ) <= 0                   ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                              ( $NOTAIL > 0                            ) {
    return "<{$TAG} {$PARAMETERS} />"                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return   "<{$TAG} {$PARAMETERS}>{$Content}</{$TAG}>"                       ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| ExportHTML |-
//////////////////////////////////////////////////////////////////////////////
// +| ExportJSON |+
// 輸出JSON
//////////////////////////////////////////////////////////////////////////////
public static function ExportJSON ( $argv , $Content , $Options            ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode              ( $argv                                  ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| ExportJSON |-
//////////////////////////////////////////////////////////////////////////////
// +| ExportJS |+
// 輸出JS
//////////////////////////////////////////////////////////////////////////////
public static function ExportJS   ( $argv , $Content , $Options            ) {
  ////////////////////////////////////////////////////////////////////////////
  $DoMinify     = true                                                       ;
  ////////////////////////////////////////////////////////////////////////////
  $MinStr       = self::GetTag    ( "minify"   , $argv                     ) ;
  $MinStr       = strtolower      ( $MinStr                                ) ;
  if                              ( strlen ( $MinStr ) > 0                 ) {
    if ( in_array ( $MinStr , [ "no" , "false" ] ) )                         {
      $DoMinify = false                                                      ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                              ( strlen ( $Content ) > 0                ) {
    if                            ( $DoMinify                              ) {
      ////////////////////////////////////////////////////////////////////////
      $DOMX     = new Minify\JS   (                                        ) ;
      $DOMX    -> add             ( $Content                               ) ;
      $MSG      = $DOMX -> minify (                                        ) ;
      ////////////////////////////////////////////////////////////////////////
    } else                                                                   {
      $MSG      = $Content                                                   ;
    }                                                                        ;
  } else                                                                     {
    $MSG        = ""                                                         ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return "<script type='text/javascript'>{$MSG}</script>"                    ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ExportJS |-
//////////////////////////////////////////////////////////////////////////////
// +| ExportCSS |+
// 輸出CSS
//////////////////////////////////////////////////////////////////////////////
public static function ExportCSS  ( $argv , $Content , $Options            ) {
  ////////////////////////////////////////////////////////////////////////////
  $DoMinify     = true                                                       ;
  ////////////////////////////////////////////////////////////////////////////
  $MinStr       = self::GetTag    ( "minify"   , $argv                     ) ;
  $MinStr       = strtolower      ( $MinStr                                ) ;
  if                              ( strlen ( $MinStr ) > 0                 ) {
    if ( in_array ( $MinStr , [ "no" , "false" ] ) )                         {
      $DoMinify = false                                                      ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                              ( strlen ( $Content ) > 0                ) {
    if                            ( $DoMinify                              ) {
      ////////////////////////////////////////////////////////////////////////
      $DOMX     = new Minify\CSS  (                                        ) ;
      $DOMX    -> add             ( $Content                               ) ;
      $MSG      = $DOMX -> minify (                                        ) ;
      ////////////////////////////////////////////////////////////////////////
    } else                                                                   {
      $MSG      = $Content                                                   ;
    }                                                                        ;
  } else                                                                     {
    $MSG        = ""                                                         ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return "<style type='text/css'>{$MSG}</style>"                             ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ExportCSS |-
//////////////////////////////////////////////////////////////////////////////
// +| ExportOptions |+
// 輸出設定值
//////////////////////////////////////////////////////////////////////////////
public static function ExportOptions ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $Options                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| ExportOptions |-
//////////////////////////////////////////////////////////////////////////////
// +| IncludeModule |+
// 引入模組
//////////////////////////////////////////////////////////////////////////////
public static function IncludeModule ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Module   = self::GetTag           ( "name"   , $argv                    ) ;
  if ( ! array_key_exists ( "Modules" , $Options )                         ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $LOCALE   = self::GetTag           ( "locale" , $argv                    ) ;
  if                                 ( strlen ( $LOCALE ) <= 0             ) {
    $LOCALE = "zh_TW"                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PATHs  = $Options [ "Modules" ]                                           ;
  if ( ! array_key_exists ( $Module , $PATHs )                             ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $EXTENSION = $Options [ "AITK"      ]                                      ;
  $PATHX     = $Options [ "Extension" ]                                      ;
  $FILENAME  = $PATHs   [ $Module     ]                                      ;
  $FILENAME  = "{$PATHX}/{$FILENAME}"                                        ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS [ "$(EXTENSION-PATH)"   ] = $EXTENSION                               ;
  $MAPS [ "$(EXTENSION-LOCALE)" ] = $LOCALE                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys  ( $FILENAME , $MAPS                   ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| IncludeModule |-
//////////////////////////////////////////////////////////////////////////////
// +| ReadFile |+
// 讀取檔案
//////////////////////////////////////////////////////////////////////////////
public static function ReadFile    ( $DB , $PICKDB , $HH , $AA , $Options  ) {
  ////////////////////////////////////////////////////////////////////////////
  $FILENAME  = $HH -> Parameter    ( "Filename"                            ) ;
  $TEXT      = file_get_contents   ( $FILENAME                             ) ;
  if                               ( ! $TEXT                               ) {
    $TEXT    = ""                                                            ;
  }                                                                          ;
  $AA [ "Message" ] = $TEXT                                                  ;
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ReadFile |-
//////////////////////////////////////////////////////////////////////////////
// +| WriteFile |+
// 寫入檔案
//////////////////////////////////////////////////////////////////////////////
public static function WriteFile   ( $DB , $PICKDB , $HH , $AA , $Options  ) {
  ////////////////////////////////////////////////////////////////////////////
  $TEXT      = $HH -> Parameter    ( "Text"                                ) ;
  $FILENAME  = $HH -> Parameter    ( "Filename"                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  $fhandle   = fopen               ( $FILENAME , "w+"                      ) ;
  fwrite                           ( $fhandle  , $TEXT                     ) ;
  fclose                           ( $fhandle                              ) ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| WriteFile |-
//////////////////////////////////////////////////////////////////////////////
// +| FileEditorUI |+
// 檔案編輯器
//////////////////////////////////////////////////////////////////////////////
public static function FileEditorUI  ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Id          = self::GetTag        ( "id"        , $argv                 ) ;
  $Filename    = self::GetTag        ( "filename"  , $argv                 ) ;
  $Directory   = self::GetTag        ( "directory" , $argv                 ) ;
  $Original    = $Filename                                                   ;
  $Label       = "Update"                                                    ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options            [ "Templates"                         ] ;
  $DIRs        = $Options            [ "Directory"                         ] ;
  ////////////////////////////////////////////////////////////////////////////
  if ( ! array_key_exists ( $Directory , $DIRs ) )                           {
    $Directory = "Default"                                                   ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DIRPATH     = $DIRs               [ $Directory                          ] ;
  $LOCALFILE   = "{$DIRPATH}/{$Filename}"                                    ;
  ////////////////////////////////////////////////////////////////////////////
  if                                 ( strlen ( $Content ) > 0             ) {
    $Original  = $Content                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                 ( strlen ( $Id ) <= 0                 ) {
    $Id        = self::RandomString  ( "File-" , 24                        ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $EXTENSION   = $Options            [ "AITK"                              ] ;
  $PATHX       = $Options            [ "Extension"                         ] ;
  $TEMPLFILE   = $Templates          [ "File::Editor"                      ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $READONLY    = ""                                                          ;
  $PARAMETERS  = array               (                                     ) ;
  $KEYs        = array_keys          ( $argv                               ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                            ( $KEYs as $K                         ) {
    //////////////////////////////////////////////////////////////////////////
    $S         = strtolower          ( $K                                  ) ;
    //////////////////////////////////////////////////////////////////////////
    switch                           ( $S                                  ) {
      case "function"                                                        :
      case "id"                                                              :
      case "filename"                                                        :
      case "directory"                                                       :
      break                                                                  ;
      case "label"                                                           :
        $Label = self::GetTag        ( $K , $argv                          ) ;
      break                                                                  ;
      case "readonly"                                                        :
        $RO    = self::GetTag        ( $K , $argv                          ) ;
        $RO    = strtolower          ( $RO                                 ) ;
        if ( ( strlen ( $RO ) <= 0 )                                        ||
             ( in_array ( $RO , [ "true" , "yes" ] ) )                     ) {
          $READONLY = "display: none;"                                       ;
        }                                                                    ;
      default                                                                :
        $V     = self::GetTag        ( $K , $argv                          ) ;
        array_push                   ( $PARAMETERS , "{$K}='{$V}'"         ) ;
      break                                                                  ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PARMS       = ""                                                          ;
  if                                 ( count ( $PARAMETERS ) > 0           ) {
    $PARMS     = implode             ( " " , $PARAMETERS                   ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(EDITOR-ID)"           =>   $Id                                        ,
    "$(BUTTON-LABEL)"        =>   $Label                                     ,
    "$(EDITOR-LABEL)"        =>   $Original                                  ,
    "$(EDITOR-PARAMETERS)"   =>   $PARMS                                     ,
    "$(EDITOR-DIRECTORY)"    =>   $Directory                                 ,
    "$(EDITOR-PATH)"         =>   $DIRPATH                                   ,
    "$(EDITOR-FILENAME)"     =>   $Filename                                  ,
    "$(EDITOR-LOCALFILE)"    =>   $LOCALFILE                                 ,
    "$(EDITOR-READONLY)"     =>   $READONLY                                  ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys  ( $TEMPLFILE , $MAPS                  ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| FileEditorUI |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsEditorDB |+
// 參數設定編輯器
//////////////////////////////////////////////////////////////////////////////
public static function SettingsEditorDB   ( $DB                              ,
                                            $argv                            ,
                                            $Content                         ,
                                            $Options                       ) {
  ////////////////////////////////////////////////////////////////////////////
  $ID          = self::GetTag             ( "id"       , $argv             ) ;
  if                                      ( strlen ( $ID ) <= 0            ) {
    $ID        = self::RandomString       ( "SettingsEditor-"  , 40        ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PICKDB      = self::GetTag             ( "database" , $argv             ) ;
  $Edit        = self::GetTag             ( "editable" , $argv             ) ;
  $SEZTAB      = self::GetAssignTable     ( "`settings`"                     ,
                                            $argv                            ,
                                            $Options                       ) ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options                 [ "Templates"                    ] ;
  $EXTENSION   = $Options                 [ "AITK"                         ] ;
  $PATHX       = $Options                 [ "Extension"                    ] ;
  $TEMPLFILE   = $Templates               [ "Settings::Editor"             ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMFILE    = $Templates               [ "Settings::Item"               ] ;
  $ITEMFILE    = "{$PATHX}/{$ITEMFILE}"                                      ;
  $TEMPL       = file_get_contents        ( $ITEMFILE                      ) ;
  ////////////////////////////////////////////////////////////////////////////
  $Edit        = strtolower               ( $Edit                          ) ;
  $EDITX       = true                                                        ;
  $Editing     =                          [ "false" , "no" ,"0"            ] ;
  if                                      ( in_array ( $Edit , $Editing )  ) {
    $EDITX     = false                                                       ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                      ( $EDITX                         ) {
    $EDITABLE  = ""                                                          ;
    $READONLY  = "display: none;"                                            ;
  } else                                                                     {
    $EDITABLE  = "display: none;"                                            ;
    $READONLY  = ""                                                          ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMS       = array                    (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ          = "select `id`,`username`,`scope`,`keyword`,`value`"          .
                 " from {$SEZTAB} order by `id` asc ;"                       ;
  $qq          = $DB -> Query             ( $QQ                            ) ;
  if                                      ( $DB -> hasResult ( $qq )       ) {
    while ( $rr = $qq -> fetch_array ( MYSQLI_BOTH )                       ) {
      $MAPX    = array                                                       (
        "$(EXTENSION-PATH)"      =>   $EXTENSION                             ,
        "$(SETTINGS-EDITOR-ID)"  =>   $ID                                    ,
        "$(SETTINGS-DB)"         =>   $PICKDB                                ,
        "$(SETTINGS-TABLE)"      =>   $SEZTAB                                ,
        "$(SETTINGS-EDIT)"       =>   $Edit                                  ,
        "$(SETTINGS-EDITABLE)"   =>   $EDITABLE                              ,
        "$(SETTINGS-READONLY)"   =>   $READONLY                              ,
        "$(SETTING-ITEM-ID)"     =>   $rr [ 0 ]                              ,
        "$(SETTINGS-USERNAME)"   =>   $rr [ 1 ]                              ,
        "$(SETTINGS-SCOPE)"      =>   $rr [ 2 ]                              ,
        "$(SETTINGS-KEYWORD)"    =>   $rr [ 3 ]                              ,
        "$(SETTINGS-VALUE)"      =>   $rr [ 4 ]                              ,
      )                                                                      ;
      $HTML    = Strings::ReplaceByKeys   ( $TEMPL , $MAPX                 ) ;
      array_push                          ( $ITEMS , $HTML                 ) ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMX       = implode                  ( "" , $ITEMS                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(EXTENSION-PATH)"      =>   $EXTENSION                                 ,
    "$(SETTINGS-EDITOR-ID)"  =>   $ID                                        ,
    "$(SETTINGS-DB)"         =>   $PICKDB                                    ,
    "$(SETTINGS-TABLE)"      =>   $SEZTAB                                    ,
    "$(SETTINGS-EDIT)"       =>   $Edit                                      ,
    "$(SETTINGS-EDITABLE)"   =>   $EDITABLE                                  ,
    "$(SETTINGS-READONLY)"   =>   $READONLY                                  ,
    "$(SETTINGS-ITEMS)"      =>   $ITEMX                                     ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $HTML = Strings::ReplaceFileByKeys      ( $TEMPLFILE , $MAPS             ) ;
  return array                                                               (
    "HTML"     => $HTML                                                      ,
    "Complete" => "<div id='{$ID}'>{$HTML}</div>"                            ,
  )                                                                          ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsEditorDB |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsEditor |+
// 參數設定編輯器
//////////////////////////////////////////////////////////////////////////////
public static function SettingsEditor ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $HTML  = self::SettingsEditorDB     ( $DBX                                 ,
                                        $argv                                ,
                                        $Content                             ,
                                        $Options                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $HTML [ "Complete" ]                                                ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsEditor |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsCheckBox |+
// CheckBox參數設定編輯器
//////////////////////////////////////////////////////////////////////////////
public static function SettingsCheckBox   ( $argv , $Content , $Options    ) {
  ////////////////////////////////////////////////////////////////////////////
  $ID          = self::RandomString       ( "Input-" , 24                  ) ;
  $PICKDB      = self::GetTag             ( "database" , $argv             ) ;
  $HOST        = self::GetCurrentDB       ( $argv , $Options               ) ;
  $SEZTAB      = self::GetAssignTable     ( "`settings`"                     ,
                                            $argv                            ,
                                            $Options                       ) ;
  $TEMPID      = "Settings::CheckBox"                                        ;
  ////////////////////////////////////////////////////////////////////////////
  $SETS        = new Settings             (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options                 [ "Templates"                    ] ;
  $EXTENSION   = $Options                 [ "AITK"                         ] ;
  $PATHX       = $Options                 [ "Extension"                    ] ;
  $TEMPLFILE   = $Templates               [ $TEMPID                        ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $USERNAME    = ""                                                          ;
  $SCOPEX      = ""                                                          ;
  $KEYWORD     = ""                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PARAMETERS  = array                    (                                ) ;
  $KEYs        = array_keys               ( $argv                          ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $KEYs as $K                    ) {
    //////////////////////////////////////////////////////////////////////////
    $S         = strtolower               ( $K                             ) ;
    //////////////////////////////////////////////////////////////////////////
    switch                                ( $S                             ) {
      ////////////////////////////////////////////////////////////////////////
      case "function"                                                        :
      case "method"                                                          :
      case "database"                                                        :
      case "table"                                                           :
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "id"                                                              :
        $ID    = self::GetTag             ( "id"       , $argv             ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "username"                                                        :
        $USR   = self::GetTag             ( "username" , $argv             ) ;
        $USERNAME = $USR                                                     ;
        $SETS -> set                      ( "Username" , $USR              ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "scope"                                                           :
        $Scope = self::GetTag             ( "scope"    , $argv             ) ;
        $SCOPEX   = $Scope                                                   ;
        $SETS -> set                      ( "Scope"    , $Scope            ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "keyword"                                                         :
        $KW    = self::GetTag             ( "keyword"  , $argv             ) ;
        $KEYWORD  = $KW                                                      ;
        $SETS -> set                      ( "Keyword"  , $KW               ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      default                                                                :
        $V     = self::GetTag             ( $K , $argv                     ) ;
        array_push                        ( $PARAMETERS , "{$K}='{$V}'"    ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB                   (                                ) ;
  if                                      ( ! $DBX -> Connect ( $HOST )    ) {
    return $DBX -> ConnectionError        (                                ) ;
  }                                                                          ;
  $VALUE       = $SETS -> obtainValue     ( $DBX , $SEZTAB                 ) ;
  $DBX        -> Close                    (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                                      ( $VALUE > 0                     ) {
    array_push                            ( $PARAMETERS , "checked"        ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PARMS       = ""                                                          ;
  if                                      ( count ( $PARAMETERS ) > 0      ) {
    $PARMS     = implode                  ( " " , $PARAMETERS              ) ;
    $PARMS     = " {$PARMS}"                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(SETTINGS-ID)"         =>   $ID                                        ,
    "$(SETTINGS-DB)"         =>   $PICKDB                                    ,
    "$(SETTINGS-TABLE)"      =>   $SEZTAB                                    ,
    "$(SETTINGS-USERNAME)"   =>   $USERNAME                                  ,
    "$(SETTINGS-SCOPE)"      =>   $SCOPEX                                    ,
    "$(SETTINGS-KEYWORD)"    =>   $KEYWORD                                   ,
    "$(SETTINGS-PARAMETERS)" =>   $PARMS                                     ,
    "$(SETTINGS-TEXT)"       =>   $Content                                   ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys       ( $TEMPLFILE , $MAPS             ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsCheckBox |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsInputer |+
// 輸入參數設定編輯器
//////////////////////////////////////////////////////////////////////////////
public static function SettingsInputer    ( $argv                            ,
                                            $Content                         ,
                                            $Options                         ,
                                            $TEMPID                        ) {
  ////////////////////////////////////////////////////////////////////////////
  $PICKDB      = self::GetTag             ( "database" , $argv             ) ;
  $HOST        = self::GetCurrentDB       ( $argv , $Options               ) ;
  $SEZTAB      = self::GetAssignTable     ( "`settings`"                     ,
                                            $argv                            ,
                                            $Options                       ) ;
  ////////////////////////////////////////////////////////////////////////////
  $SETS        = new Settings             (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options                 [ "Templates"                    ] ;
  $EXTENSION   = $Options                 [ "AITK"                         ] ;
  $PATHX       = $Options                 [ "Extension"                    ] ;
  $TEMPLFILE   = $Templates               [ $TEMPID                        ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $USERNAME    = ""                                                          ;
  $SCOPEX      = ""                                                          ;
  $KEYWORD     = ""                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PARAMETERS  = array                    (                                ) ;
  $KEYs        = array_keys               ( $argv                          ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $KEYs as $K                    ) {
    //////////////////////////////////////////////////////////////////////////
    $S         = strtolower               ( $K                             ) ;
    //////////////////////////////////////////////////////////////////////////
    switch                                ( $S                             ) {
      ////////////////////////////////////////////////////////////////////////
      case "function"                                                        :
      case "method"                                                          :
      case "database"                                                        :
      case "table"                                                           :
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "username"                                                        :
        $USR   = self::GetTag             ( "username" , $argv             ) ;
        $USERNAME = $USR                                                     ;
        $SETS -> set                      ( "Username" , $USR              ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "scope"                                                           :
        $Scope = self::GetTag             ( "scope"    , $argv             ) ;
        $SCOPEX   = $Scope                                                   ;
        $SETS -> set                      ( "Scope"    , $Scope            ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "keyword"                                                         :
        $KW    = self::GetTag             ( "keyword"  , $argv             ) ;
        $KEYWORD  = $KW                                                      ;
        $SETS -> set                      ( "Keyword"  , $KW               ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      default                                                                :
        $V     = self::GetTag             ( $K , $argv                     ) ;
        array_push                        ( $PARAMETERS , "{$K}='{$V}'"    ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB                   (                                ) ;
  if                                      ( ! $DBX -> Connect ( $HOST )    ) {
    return $DBX -> ConnectionError        (                                ) ;
  }                                                                          ;
  $VALUE       = $SETS -> obtainValue     ( $DBX , $SEZTAB                 ) ;
  $DBX        -> Close                    (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $PARMS       = ""                                                          ;
  if                                      ( count ( $PARAMETERS ) > 0      ) {
    $PARMS     = implode                  ( " " , $PARAMETERS              ) ;
    $PARMS     = " {$PARMS}"                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(SETTINGS-DB)"         =>   $PICKDB                                    ,
    "$(SETTINGS-TABLE)"      =>   $SEZTAB                                    ,
    "$(SETTINGS-USERNAME)"   =>   $USERNAME                                  ,
    "$(SETTINGS-SCOPE)"      =>   $SCOPEX                                    ,
    "$(SETTINGS-KEYWORD)"    =>   $KEYWORD                                   ,
    "$(SETTINGS-VALUE)"      =>   $VALUE                                     ,
    "$(SETTINGS-PARAMETERS)" =>   $PARMS                                     ,
    "$(SETTINGS-TEXT)"       =>   $Content                                   ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys       ( $TEMPLFILE , $MAPS             ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsInputer |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsNumber |+
// Number參數設定編輯器
//////////////////////////////////////////////////////////////////////////////
public static function SettingsNumber     ( $argv , $Content , $Options    ) {
  return self::SettingsInputer            ( $argv                            ,
                                            $Content                         ,
                                            $Options                         ,
                                            "Settings::Number"             ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsNumber |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsText |+
// Text參數設定編輯器
//////////////////////////////////////////////////////////////////////////////
public static function SettingsText       ( $argv , $Content , $Options    ) {
  return self::SettingsInputer            ( $argv                            ,
                                            $Content                         ,
                                            $Options                         ,
                                            "Settings::Text"               ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsText |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsStarDate |+
// StarDate參數設定編輯器
//////////////////////////////////////////////////////////////////////////////
public static function SettingsStarDate   ( $argv , $Content , $Options    ) {
  ////////////////////////////////////////////////////////////////////////////
  $PICKDB      = self::GetTag             ( "database" , $argv             ) ;
  $HOST        = self::GetCurrentDB       ( $argv , $Options               ) ;
  $SEZTAB      = self::GetAssignTable     ( "`settings`"                     ,
                                            $argv                            ,
                                            $Options                       ) ;
  $TEMPID      = "Settings::DateTime"                                        ;
  ////////////////////////////////////////////////////////////////////////////
  $SETS        = new Settings             (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options                 [ "Templates"                    ] ;
  $EXTENSION   = $Options                 [ "AITK"                         ] ;
  $PATHX       = $Options                 [ "Extension"                    ] ;
  $TEMPLFILE   = $Templates               [ $TEMPID                        ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $USERNAME    = ""                                                          ;
  $SCOPEX      = ""                                                          ;
  $KEYWORD     = ""                                                          ;
  $TZ          = "Asia/Taipei"                                               ;
  ////////////////////////////////////////////////////////////////////////////
  $PARAMETERS  = array                    (                                ) ;
  $KEYs        = array_keys               ( $argv                          ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $KEYs as $K                    ) {
    //////////////////////////////////////////////////////////////////////////
    $S         = strtolower               ( $K                             ) ;
    //////////////////////////////////////////////////////////////////////////
    switch                                ( $S                             ) {
      ////////////////////////////////////////////////////////////////////////
      case "function"                                                        :
      case "method"                                                          :
      case "database"                                                        :
      case "table"                                                           :
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "username"                                                        :
        $USR   = self::GetTag             ( "username" , $argv             ) ;
        $USERNAME = $USR                                                     ;
        $SETS -> set                      ( "Username" , $USR              ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "scope"                                                           :
        $Scope = self::GetTag             ( "scope"    , $argv             ) ;
        $SCOPEX   = $Scope                                                   ;
        $SETS -> set                      ( "Scope"    , $Scope            ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "keyword"                                                         :
        $KW    = self::GetTag             ( "keyword"  , $argv             ) ;
        $KEYWORD  = $KW                                                      ;
        $SETS -> set                      ( "Keyword"  , $KW               ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      case "timezone"                                                        :
        $TZ    = self::GetTag             ( "timezone" , $argv             ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
      default                                                                :
        $V     = self::GetTag             ( $K , $argv                     ) ;
        array_push                        ( $PARAMETERS , "{$K}='{$V}'"    ) ;
      break                                                                  ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB                   (                                ) ;
  if                                      ( ! $DBX -> Connect ( $HOST )    ) {
    return $DBX -> ConnectionError        (                                ) ;
  }                                                                          ;
  $VALUE       = $SETS -> obtainValue     ( $DBX , $SEZTAB                 ) ;
  $DBX        -> Close                    (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $NOW         = new StarDate             (                                ) ;
  if                                      ( strlen ( $VALUE ) > 0          ) {
    $NOW      -> Stardate = $VALUE                                           ;
  } else                                                                     {
    $NOW      -> Now                      (                                ) ;
  }                                                                          ;
  $DATETIME    = $NOW -> toDateTimeString ( $TZ , "T" , "Y-m-d" , "H:i:s"  ) ;
  ////////////////////////////////////////////////////////////////////////////
  $PARMS       = ""                                                          ;
  if                                      ( count ( $PARAMETERS ) > 0      ) {
    $PARMS     = implode                  ( " " , $PARAMETERS              ) ;
    $PARMS     = " {$PARMS}"                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(SETTINGS-DB)"         =>   $PICKDB                                    ,
    "$(SETTINGS-TABLE)"      =>   $SEZTAB                                    ,
    "$(SETTINGS-USERNAME)"   =>   $USERNAME                                  ,
    "$(SETTINGS-SCOPE)"      =>   $SCOPEX                                    ,
    "$(SETTINGS-KEYWORD)"    =>   $KEYWORD                                   ,
    "$(SETTINGS-VALUE)"      =>   $DATETIME                                  ,
    "$(SETTINGS-TZ)"         =>   $TZ                                        ,
    "$(SETTINGS-PARAMETERS)" =>   $PARMS                                     ,
    "$(SETTINGS-TEXT)"       =>   $Content                                   ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys       ( $TEMPLFILE , $MAPS             ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsStarDate |-
//////////////////////////////////////////////////////////////////////////////
// +| SettingsUI |+
// 參數設定介面進入點
//////////////////////////////////////////////////////////////////////////////
public static function SettingsUI    ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Method      = self::GetTag        ( "method"    , $argv                 ) ;
  $Method      = strtolower          ( $Method                             ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                             ( $Method                             ) {
    //////////////////////////////////////////////////////////////////////////
    case "editor"                                                            :
    return self::SettingsEditor      ( $argv , $Content , $Options         ) ;
    //////////////////////////////////////////////////////////////////////////
    case "checkbox"                                                          :
    return self::SettingsCheckBox    ( $argv , $Content , $Options         ) ;
    //////////////////////////////////////////////////////////////////////////
    case "number"                                                            :
    return self::SettingsNumber      ( $argv , $Content , $Options         ) ;
    //////////////////////////////////////////////////////////////////////////
    case "text"                                                              :
    return self::SettingsText        ( $argv , $Content , $Options         ) ;
    //////////////////////////////////////////////////////////////////////////
    case "stardate"                                                          :
    return self::SettingsStarDate    ( $argv , $Content , $Options         ) ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SettingsUI |-
//////////////////////////////////////////////////////////////////////////////
// +| CatalogFolderFiles |+
// 分類檔案項目
//////////////////////////////////////////////////////////////////////////////
public static function CatalogFolderFiles ( $CURRENT , $FILES              ) {
  ////////////////////////////////////////////////////////////////////////////
  $SUBDIRS      = array                   (                                ) ;
  $FILEX        = array                   (                                ) ;
  $ITEMS        = array                   (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $FILES as $F                   ) {
    $FILE       = "{$CURRENT}/{$F}"                                          ;
    if                                    ( ( $F == "."                  )  or
                                            ( $F == ".."                 ) ) {
    } else
    if                                    ( is_dir ( $FILE )               ) {
      array_push                          ( $SUBDIRS , $F                  ) ;
    } else                                                                   {
      array_push                          ( $FILEX   , $F                  ) ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $SUBDIRS as $F                 ) {
    array_push                            ( $ITEMS    , $F                 ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $FILEX   as $F                 ) {
    array_push                            ( $ITEMS    , $F                 ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return $ITEMS                                                              ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CatalogFolderFiles |-
//////////////////////////////////////////////////////////////////////////////
// +| ListFolderItems |+
// 列出檔案項目
//////////////////////////////////////////////////////////////////////////////
public static function ListFolderItems  ( $CURRENT                         ) {
  ////////////////////////////////////////////////////////////////////////////
  $FILEs   = array                      (                                  ) ;
  $HDIR    = opendir                    ( $CURRENT                         ) ;
  while ( ( $F = readdir ( $HDIR ) ) !== false )                             {
    array_push                          ( $FILEs , $F                      ) ;
  }                                                                          ;
  closedir                              ( $HDIR                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $FILEs                                                              ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ListFolderItems |-
//////////////////////////////////////////////////////////////////////////////
// +| GrepFolderItems |+
// 列出檔案項目
//////////////////////////////////////////////////////////////////////////////
public static function GrepFolderItems    ( $CURRENT , $EXTS               ) {
  ////////////////////////////////////////////////////////////////////////////
  $FILES        = self::ListFolderItems   ( $CURRENT                       ) ;
  $EXT          = explode                 ( " " , $EXTS                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  $SUBDIRS      = array                   (                                ) ;
  $FILEX        = array                   (                                ) ;
  $ITEMS        = array                   (                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $FILES as $F                   ) {
    $FILE       = "{$CURRENT}/{$F}"                                          ;
    if                                    ( ( $F == "."                  )  or
                                            ( $F == ".."                 ) ) {
    } else
    if                                    ( is_dir ( $FILE )               ) {
      array_push                          ( $SUBDIRS , $F                  ) ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $CUX          = $CURRENT                                                   ;
  $CUX          = str_replace             ( "\\" , "/" , $CUX              ) ;
  $CUX          = str_replace             ( "//" , "/" , $CUX              ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $EXT as $E                     ) {
    foreach                               ( glob ("{$CUX}/{$E}") as $F     ) {
      $X        = str_replace             ( "\\"      , "/" , $F           ) ;
      $X        = str_replace             ( "//"      , "/" , $X           ) ;
      $X        = str_replace             ( "{$CUX}/" , ""  , $X           ) ;
      $X        = str_replace             ( $CUX      , ""  , $X           ) ;
      if                                  ( ! in_array ( $X , $SUBDIRS )   ) {
        if                                ( ! in_array ( $X , $FILEX   )   ) {
          array_push                      ( $FILEX , $X                    ) ;
        }                                                                    ;
      }                                                                      ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $SUBDIRS as $F                 ) {
    array_push                            ( $ITEMS    , $F                 ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                                 ( $FILEX   as $F                 ) {
    array_push                            ( $ITEMS    , $F                 ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return $ITEMS                                                              ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GrepFolderItems |-
//////////////////////////////////////////////////////////////////////////////
// +| ParentFolderItem |+
// 檔案項目
//////////////////////////////////////////////////////////////////////////////
public static function ParentFolderItem ( $ID                                ,
                                          $BROWSABLE                         ,
                                          $DOWNLOAD                          ,
                                          $DIRECTORY                         ,
                                          $PATH                              ,
                                          $EXTS                              ,
                                          $EXTENSION                         ,
                                          $EDITABLE                          ,
                                          $TEMPL                             ,
                                          $ROOT                            ) {
  ////////////////////////////////////////////////////////////////////////////
  if                                    ( ! $EDITABLE                      ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $XENTRY    = $TEMPL                                                        ;
  ////////////////////////////////////////////////////////////////////////////
  if ( ( strlen ( $PATH ) <= 0 ) or ( $PATH == "/" ) )                       {
    $DIRPATH = ""                                                            ;
    $CURRENT = ""                                                            ;
    $XICON   = "{$EXTENSION}/images/24x24/catalog.png"                       ;
  } else                                                                     {
    $DIRPATH = $DIRECTORY                                                    ;
    $CURRENT = "{$ROOT}{$PATH}/.."                                           ;
    $CURRENT = str_replace              ( "//"  , "/" , $CURRENT           ) ;
    $CURRENT = dirname                  ( dirname ( $CURRENT )             ) ;
    $CURRENT = str_replace              ( "\\"  , "/" , $CURRENT           ) ;
    $CURRENT = str_replace              ( $ROOT , ""  , $CURRENT           ) ;
    $CURRENT = str_replace              ( "//"  , "/" , $CURRENT           ) ;
    $XICON   = "{$EXTENSION}/images/24x24/courses.png"                       ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $FTYPE     = "目錄" ;
  $FILEXT    = ""                                                            ;
  $FILESIZE  = ""                                                            ;
  $FILEDT    = ""                                                            ;
  ////////////////////////////////////////////////////////////////////////////
  $JSC   = "AitkChangeDirectory('{$ID}','{$BROWSABLE}','{$DOWNLOAD}','{$DIRPATH}','{$CURRENT}','{$EXTS}');" ;
  $ONCLICK = " onclick=\"{$JSC}\""                                           ;
  ////////////////////////////////////////////////////////////////////////////
  $SDIRX     = "<a {$ONCLICK}>..</a>"                                        ;
  ////////////////////////////////////////////////////////////////////////////
  $ICON      = "<img src='{$XICON}' width='24' height='24'{$ONCLICK}>"       ;
  ////////////////////////////////////////////////////////////////////////////
  $XENTRY    = str_replace          ( "$(FILE-ICON)"                         ,
                                      $ICON                                  ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILENAME)"                          ,
                                      $SDIRX                                 ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-TYPE)"                         ,
                                      $FTYPE                                 ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-EXT)"                          ,
                                      $FILEXT                                ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-SIZE)"                         ,
                                      $FILESIZE                              ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-DATE-TIME)"                    ,
                                      $FILEDT                                ,
                                      $XENTRY                              ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $XENTRY                                                             ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ParentFolderItem |-
//////////////////////////////////////////////////////////////////////////////
// +| CreateFolderItem |+
// 檔案項目
//////////////////////////////////////////////////////////////////////////////
public static function CreateFolderItem ( $ID                                ,
                                          $BROWSABLE                         ,
                                          $DOWNLOAD                          ,
                                          $DIRECTORY                         ,
                                          $PATH                              ,
                                          $EXTS                              ,
                                          $EXTENSION                         ,
                                          $WIKI                              ,
                                          $EDITABLE                          ,
                                          $TEMPL                             ,
                                          $ROOT                              ,
                                          $FILE                            ) {
  ////////////////////////////////////////////////////////////////////////////
  $XENTRY    = $TEMPL                                                        ;
  $CURRENT   = "{$ROOT}{$PATH}"                                              ;
  $FNAME     = "{$CURRENT}/{$FILE}"                                          ;
  $isDir     = is_dir                   ( $FNAME                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $ONCLICK   = ""                                                            ;
  $FTYPE     = "檔案" ;
  if                                    ( $isDir                           ) {
    //////////////////////////////////////////////////////////////////////////
    $FTYPE   = "目錄" ;
    //////////////////////////////////////////////////////////////////////////
    if                                  ( $EDITABLE                        ) {
      ////////////////////////////////////////////////////////////////////////
      $FDIR  = "{$PATH}/{$FILE}"                                             ;
      ////////////////////////////////////////////////////////////////////////
      $JSC   = "AitkChangeDirectory('{$ID}','{$BROWSABLE}','{$DOWNLOAD}','{$DIRECTORY}','{$FDIR}','{$EXTS}');" ;
      $ONCLICK = " onclick=\"{$JSC}\""                                       ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $SICON     = "{$EXTENSION}/images/24x24/Books.png"                         ;
  $XICON     = "{$EXTENSION}/images/24x24/courses.png"                       ;
  $VICON     = $SICON                                                        ;
  if                                    ( $isDir                           ) {
    $VICON   = $XICON                                                        ;
  }                                                                          ;
  $ICON      = "<img src='{$VICON}' width='24' height='24'{$ONCLICK}>"       ;
  ////////////////////////////////////////////////////////////////////////////
  $FILEXT    = ""                                                            ;
  $FILESIZE  = ""                                                            ;
  $FILEDT    = ""                                                            ;
  $SDIRX     = $FILE                                                         ;
  ////////////////////////////////////////////////////////////////////////////
  if                                ( $isDir                               ) {
    if                              ( $EDITABLE                            ) {
      $SDIRX = "<a {$ONCLICK}>{$FILE}</a>"                                   ;
    }                                                                        ;
  } else                                                                     {
    //////////////////////////////////////////////////////////////////////////
    $FILEXT  = pathinfo             ( $FNAME , PATHINFO_EXTENSION          ) ;
    $FILESIZE = filesize            ( $FNAME                               ) ;
    $FILEDT  = date                 ( "F d Y H:i:s" , filemtime ( $FNAME ) ) ;
    //////////////////////////////////////////////////////////////////////////
    $DN      = strtolower           ( $DOWNLOAD                            ) ;
    if ( in_array ( $DN , [ "yes" , "true" ] ) )                             {
      ////////////////////////////////////////////////////////////////////////
      $WW    = $WIKI                                                         ;
      $WW    = str_replace          ( "//" , "/" , $WW                     ) ;
      $WW    = str_replace          ( "\\" , "/" , $WW                     ) ;
      $HREF  = dirname              ( $FNAME                               ) ;
      $HREF  = "{$HREF}/{$FILE}"                                             ;
      $HREF  = str_replace          ( "//" , "/" , $HREF                   ) ;
      $HREF  = str_replace          ( "\\" , "/" , $HREF                   ) ;
      $HREF  = str_replace          ( $WW  , ""  , $HREF                   ) ;
      ////////////////////////////////////////////////////////////////////////
      $SDIRX = "<a href='{$HREF}' download>{$SDIRX}</a>"                     ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $XENTRY    = str_replace          ( "$(FILE-ICON)"                         ,
                                      $ICON                                  ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILENAME)"                          ,
                                      $SDIRX                                 ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-TYPE)"                         ,
                                      $FTYPE                                 ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-EXT)"                          ,
                                      $FILEXT                                ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-SIZE)"                         ,
                                      $FILESIZE                              ,
                                      $XENTRY                              ) ;
  $XENTRY    = str_replace          ( "$(FILE-DATE-TIME)"                    ,
                                      $FILEDT                                ,
                                      $XENTRY                              ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $XENTRY                                                             ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CreateFolderItem |-
//////////////////////////////////////////////////////////////////////////////
// +| ComposeDirectory |+
// 製作目錄資訊
//////////////////////////////////////////////////////////////////////////////
public static function ComposeDirectory ( $ID                                ,
                                          $BROWSABLE                         ,
                                          $DOWNLOAD                          ,
                                          $DIRECTORY                         ,
                                          $PATH                              ,
                                          $EXTS                              ,
                                          $Options                         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options               [ "Templates"                      ] ;
  $EXTENSION   = $Options               [ "AITK"                           ] ;
  $WIKI        = $Options               [ "Wiki"                           ] ;
  $PATHX       = $Options               [ "Extension"                      ] ;
  $DIRS        = $Options               [ "Directory"                      ] ;
  $KEYs        = array_keys             ( $DIRS                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  $FOLDER      = $Templates             [ "Directory::Folder"              ] ;
  $ENTRY       = $Templates             [ "Directory::Entry"               ] ;
  ////////////////////////////////////////////////////////////////////////////
  $FTEMPX      = "{$PATHX}/{$FOLDER}"                                        ;
  $FENTRY      = "{$PATHX}/{$ENTRY}"                                         ;
  ////////////////////////////////////////////////////////////////////////////
  $FTEMPL      = file_get_contents      ( $FTEMPX                          ) ;
  $ETEMPL      = file_get_contents      ( $FENTRY                          ) ;
  ////////////////////////////////////////////////////////////////////////////
  $BROWSABLE   = strtolower             ( $BROWSABLE                       ) ;
  $EDITABLE    = in_array               ( $BROWSABLE , [ "yes" , "true" ]  ) ;
  $ITEMs       = array                  (                                  ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                                    ( in_array ( $DIRECTORY , $KEYs )  ) {
    //////////////////////////////////////////////////////////////////////////
    $ROOT      = $DIRS                  [ $DIRECTORY                       ] ;
    $CURRENT   = "{$ROOT}{$PATH}"                                            ;
    //////////////////////////////////////////////////////////////////////////
    if                                  ( strlen ( $EXTS ) > 0             ) {
      ////////////////////////////////////////////////////////////////////////
      $FILEs   = self::GrepFolderItems  ( $CURRENT , $EXTS                 ) ;
      ////////////////////////////////////////////////////////////////////////
    } else                                                                   {
      ////////////////////////////////////////////////////////////////////////
      $FILEs   = self::ListFolderItems  ( $CURRENT                         ) ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    $FILEs     = self::CatalogFolderFiles ( $CURRENT , $FILEs              ) ;
    //////////////////////////////////////////////////////////////////////////
    $PFI       = self::ParentFolderItem ( $ID                                ,
                                          $BROWSABLE                         ,
                                          $DOWNLOAD                          ,
                                          $DIRECTORY                         ,
                                          $PATH                              ,
                                          $EXTS                              ,
                                          $EXTENSION                         ,
                                          $EDITABLE                          ,
                                          $ETEMPL                            ,
                                          $ROOT                            ) ;
    if                                  ( strlen ( $PFI ) > 0              ) {
      array_push                        ( $ITEMs , $PFI                    ) ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    foreach                             ( $FILEs as $F                     ) {
      ////////////////////////////////////////////////////////////////////////
      $CFI     = self::CreateFolderItem ( $ID                                ,
                                          $BROWSABLE                         ,
                                          $DOWNLOAD                          ,
                                          $DIRECTORY                         ,
                                          $PATH                              ,
                                          $EXTS                              ,
                                          $EXTENSION                         ,
                                          $WIKI                              ,
                                          $EDITABLE                          ,
                                          $ETEMPL                            ,
                                          $ROOT                              ,
                                          $F                               ) ;
      array_push                        ( $ITEMs , $CFI                    ) ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  } else                                                                     {
    foreach                             ( $KEYs as $K                      ) {
      ////////////////////////////////////////////////////////////////////////
      $XENTRY  = $ETEMPL                                                     ;
      ////////////////////////////////////////////////////////////////////////
      $ONCLICK = ""                                                          ;
      if                                ( $EDITABLE                        ) {
        $JSC   = "AitkChangeDirectory('{$ID}','{$BROWSABLE}','{$DOWNLOAD}','{$K}','/','{$EXTS}');" ;
        $ONCLICK = " onclick=\"{$JSC}\""                                     ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
      $SICON   = "{$EXTENSION}/images/24x24/catalog.png"                     ;
      $ICON    = "<img src='{$SICON}' width='24' height='24'{$ONCLICK}>"     ;
      ////////////////////////////////////////////////////////////////////////
      if                                ( $EDITABLE                        ) {
        $SDIRX = "<a {$ONCLICK}>{$K}</a>"                                    ;
      } else                                                                 {
        $SDIRX = $K                                                          ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
      $XENTRY  = str_replace            ( "$(FILE-ICON)"                     ,
                                          $ICON                              ,
                                          $XENTRY                          ) ;
      $XENTRY  = str_replace            ( "$(FILENAME)"                      ,
                                          $SDIRX                             ,
                                          $XENTRY                          ) ;
      $XENTRY  = str_replace            ( "$(FILE-TYPE)"                     ,
                                          "頂層目錄" ,
                                          $XENTRY                          ) ;
      $XENTRY  = str_replace            ( "$(FILE-EXT)"                      ,
                                          ""                                 ,
                                          $XENTRY                          ) ;
      $XENTRY  = str_replace            ( "$(FILE-SIZE)"                     ,
                                          ""                                 ,
                                          $XENTRY                          ) ;
      $XENTRY  = str_replace            ( "$(FILE-DATE-TIME)"                ,
                                          ""                                 ,
                                          $XENTRY                          ) ;
      ////////////////////////////////////////////////////////////////////////
      array_push                        ( $ITEMs , $XENTRY                 ) ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $LISTINGS    = implode                ( "\n" , $ITEMs                    ) ;
  return str_replace     ( "$(FILE-FOLDER-LISTINGS)" , $LISTINGS , $FTEMPL ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ComposeDirectory |-
//////////////////////////////////////////////////////////////////////////////
// +| FetchDirectory |+
// AJAX抓取目錄列表
//////////////////////////////////////////////////////////////////////////////
public static function FetchDirectory ( $DB                                  ,
                                        $PICKDB                              ,
                                        $HH                                  ,
                                        $AA                                  ,
                                        $Options                           ) {
  ////////////////////////////////////////////////////////////////////////////
  $ID        = $HH -> Parameter       ( "Id"                               ) ;
  $BROWSABLE = $HH -> Parameter       ( "Browsable"                        ) ;
  $DOWNLOAD  = $HH -> Parameter       ( "Download"                         ) ;
  $DIRECTORY = $HH -> Parameter       ( "Directory"                        ) ;
  $PATH      = $HH -> Parameter       ( "Path"                             ) ;
  $EXTS      = $HH -> Parameter       ( "Extensions"                       ) ;
  ////////////////////////////////////////////////////////////////////////////
  $MSG       = self::ComposeDirectory ( $ID                                  ,
                                        $BROWSABLE                           ,
                                        $DOWNLOAD                            ,
                                        $DIRECTORY                           ,
                                        $PATH                                ,
                                        $EXTS                                ,
                                        $Options                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Message" ] = $MSG                                                   ;
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| FetchDirectory |-
//////////////////////////////////////////////////////////////////////////////
// +| ListDirectory |+
// 目錄列表
//////////////////////////////////////////////////////////////////////////////
public static function ListDirectory  ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $BROWSABLE = self::GetTag           ( "browsable"  , $argv               ) ;
  $DOWNLOAD  = self::GetTag           ( "download"   , $argv               ) ;
  $DIRECTORY = self::GetTag           ( "directory"  , $argv               ) ;
  $PATH      = self::GetTag           ( "path"       , $argv               ) ;
  $EXTS      = self::GetTag           ( "extensions" , $argv               ) ;
  $ID        = self::RandomString     ( "Folder-"    , 40                  ) ;
  ////////////////////////////////////////////////////////////////////////////
  $MSG       = self::ComposeDirectory ( $ID                                  ,
                                        $BROWSABLE                           ,
                                        $DOWNLOAD                            ,
                                        $DIRECTORY                           ,
                                        $PATH                                ,
                                        $EXTS                                ,
                                        $Options                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  return "<div id='{$ID}'>{$MSG}</div>"                                      ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ListDirectory |-
//////////////////////////////////////////////////////////////////////////////
// +| PictureUI |+
// 圖片
//////////////////////////////////////////////////////////////////////////////
public static function PictureUI     ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $Options                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| PictureUI |-
//////////////////////////////////////////////////////////////////////////////
// +| IconUI |+
// 圖示
//////////////////////////////////////////////////////////////////////////////
public static function IconUI        ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $Options                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| IconUI |-
//////////////////////////////////////////////////////////////////////////////
// +| AvatarUI |+
// 頭像
//////////////////////////////////////////////////////////////////////////////
public static function AvatarUI      ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $Options                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| AvatarUI |-
//////////////////////////////////////////////////////////////////////////////
// +| ExportYouTube |+
// YouTube
//////////////////////////////////////////////////////////////////////////////
public static function ExportYouTube ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $Options                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| ExportYouTube |-
//////////////////////////////////////////////////////////////////////////////
// +| TimeZones |+
// 時區
//////////////////////////////////////////////////////////////////////////////
public static function TimeZones     ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $Options                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| TimeZones |-
//////////////////////////////////////////////////////////////////////////////
// +| GetSqlTable |+
// 資料庫表格
//////////////////////////////////////////////////////////////////////////////
public static function GetSqlTable   ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  if                                 ( strlen ( $Content ) <= 0            ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  $TOTAL = ""                                                                ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PARAMETERs  = [ "function" , "method" , "database" , "table" ]            ;
  ////////////////////////////////////////////////////////////////////////////
  $TITLEs      = array               (                                     ) ;
  $COLUMNS     = self::GetTag        ( "columns"   , $argv                 ) ;
  if                                 ( strlen ( $COLUMNS ) > 0             ) {
    array_push                       ( $PARAMETERs , "columns"             ) ;
    $TOTAL     = intval              ( $COLUMNS    , 10                    ) ;
    if                               ( ( $TOTAL > 0 ) and ( $TOTAL < 51 )  ) {
      for                            ( $II = 0 ; $II < $TOTAL ; $II++      ) {
        //////////////////////////////////////////////////////////////////////
        $TITLE = self::GetTag        ( $II         , $argv                 ) ;
        array_push                   ( $TITLEs     , $TITLE                ) ;
        array_push                   ( $PARAMETERs , "$II"                 ) ;
        //////////////////////////////////////////////////////////////////////
      }                                                                      ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $HT          = new Html             (                                    ) ;
  $HT         -> setTag               ( "table"                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  $VARs        = array_keys           ( $argv                              ) ;
  foreach                             ( $VARs as $V                        ) {
    $Z         = strtolower           ( $V                                 ) ;
    if                                ( ! in_array ( $Z , $PARAMETERs )    ) {
      $HT     -> AddPair              ( $V , $argv [ $V ]                  ) ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $THREAD      = $HT     -> addHtml   ( "thread"                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $TBODY       = $HT     -> addHtml   ( "tbody"                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  $qq          = $DBX    -> Query     ( $Content                           ) ;
  if                                  ( $DBX -> hasResult ( $qq )          ) {
    while ( $rr = $qq -> fetch_array ( MYSQLI_ASSOC ) )                      {
      ////////////////////////////////////////////////////////////////////////
      $KEYs    = array_keys           ( $rr                                ) ;
      if                              ( count ( $TITLEs ) <= 0             ) {
        $TITLEs = $KEYs                                                      ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
      $TRX     = $TBODY -> addTr      (                                    ) ;
      ////////////////////////////////////////////////////////////////////////
      foreach                         ( $KEYs as $K                        ) {
        $TRX  -> addTd                ( $rr [ $K ]                         ) ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                  ( count ( $TITLEs ) > 0              ) {
    //////////////////////////////////////////////////////////////////////////
    $TRX       = $THREAD -> addTr     (                                    ) ;
    foreach                           ( $TITLEs as $T                      ) {
      $TD      = $TRX    -> addTd     ( $T                                 ) ;
      $TD     -> AddPair              ( "class" , "SqlTableHeader"         ) ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    $TFOOT     = $HT     -> addHtml   ( "tfoot"                            ) ;
    //////////////////////////////////////////////////////////////////////////
    $TRX       = $TFOOT  -> addTr     (                                    ) ;
    foreach                           ( $TITLEs as $T                      ) {
      $TD      = $TRX    -> addTd     ( $T                                 ) ;
      $TD     -> AddPair              ( "class" , "SqlTableHeader"         ) ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $HT -> Content               (                                    ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetSqlTable |-
//////////////////////////////////////////////////////////////////////////////
// +| GetSqlValue |+
// 資料庫介面
//////////////////////////////////////////////////////////////////////////////
public static function GetSqlValue   ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  if                                 ( strlen ( $Content ) <= 0            ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  $TOTAL = ""                                                                ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $V           = $DBX -> FetchOne     ( $Content                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return "{$V}"                                                              ;
}
//////////////////////////////////////////////////////////////////////////////
// -| GetSqlValue |-
//////////////////////////////////////////////////////////////////////////////
// +| SqlInterface |+
// 資料庫介面
//////////////////////////////////////////////////////////////////////////////
public static function SqlInterface  ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Method      = self::GetTag        ( "method" , $argv                    ) ;
  $Method      = strtolower          ( $Method                             ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                             ( $Method                             ) {
    case "value"                                                             :
    return self::GetSqlValue         ( $argv , $Content , $Options         ) ;
    case "table"                                                             :
    return self::GetSqlTable         ( $argv , $Content , $Options         ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $argv                               ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| SqlInterface |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTypeCounts |+
// CIOS 物件類型計數
//////////////////////////////////////////////////////////////////////////////
public static function CiosTypeCounts ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  $TOTAL = ""                                                                ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TYPETABLE   = self::GetAssignTable ( "`types`" , $argv , $Options       ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ          = "select count(*) from {$TYPETABLE}"                         .
                 " where ( `used` > 0 ) ;"                                   ;
  $TOTAL       = $DBX -> FetchOne     ( $QQ                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return "{$Content}{$TOTAL}"                                                ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTypeCounts |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTypeBase |+
// CIOS 物件類型起始基數
//////////////////////////////////////////////////////////////////////////////
public static function CiosTypeBase   ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  $TOTAL = ""                                                                ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TYPETABLE   = self::GetAssignTable ( "`types`" , $argv , $Options       ) ;
  $TYPEID      = self::GetTag         ( "type"    , $argv                  ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ          = "select `head` from {$TYPETABLE}"                           .
                 " where ( `id` = {$TYPEID} ) ;"                             ;
  $BASE        = $DBX -> FetchOne     ( $QQ                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return "{$Content}{$BASE}"                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTypeBase |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTypeMax |+
// CIOS 物件類型最大數值
//////////////////////////////////////////////////////////////////////////////
public static function CiosTypeMax    ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  $TOTAL = ""                                                                ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TYPETABLE   = self::GetAssignTable ( "`types`" , $argv , $Options       ) ;
  $TYPEID      = self::GetTag         ( "type"    , $argv                  ) ;
  ////////////////////////////////////////////////////////////////////////////
  $MAXV        = 0                                                           ;
  $QQ          = "select `head`,`digits` from {$TYPETABLE}"                  .
                 " where ( `id` = {$TYPEID} ) ;"                             ;
  $qq          = $DBX -> Query        ( $QQ                                ) ;
  if                                  ( $DBX -> hasResult ( $qq )          ) {
    //////////////////////////////////////////////////////////////////////////
    $rr        = $qq -> fetch_array   ( MYSQLI_BOTH                        ) ;
    //////////////////////////////////////////////////////////////////////////
    $BASE      = $rr [ 0 ]                                                   ;
    $DIGITS    = $rr [ 1 ]                                                   ;
    //////////////////////////////////////////////////////////////////////////
    $AMOUNT    = 1                                                           ;
    for                               ( $II = 0 ; $II < $DIGITS ; $II++    ) {
      $AMOUNT  = intval               ( $AMOUNT * 10 , 10                  ) ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    $MAXV      = intval               ( $BASE + $AMOUNT - 1 , 10           ) ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return "{$Content}{$MAXV}"                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTypeMax |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTypeAmount |+
// CIOS 物件類型總數
//////////////////////////////////////////////////////////////////////////////
public static function CiosTypeAmount ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  $TOTAL = ""                                                                ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TYPETABLE   = self::GetAssignTable ( "`types`" , $argv , $Options       ) ;
  $TYPEID      = self::GetTag         ( "type"    , $argv                  ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ          = "select `digits` from {$TYPETABLE}"                         .
                 " where ( `id` = {$TYPEID} ) ;"                             ;
  $DIGITS      = $DBX -> FetchOne     ( $QQ                                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  $AMOUNT      = 1                                                           ;
  for                                 ( $II = 0 ; $II < $DIGITS ; $II++    ) {
    $AMOUNT    = intval               ( $AMOUNT * 10 , 10                  ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return "{$Content}{$AMOUNT}"                                               ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTypeAmount |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTypeListings |+
// CIOS 物件類型列表
//////////////////////////////////////////////////////////////////////////////
public static function CiosTypeListings ( $argv , $Content , $Options      ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PICKDB      = self::GetTag         ( "database" , $argv                 ) ;
  $TYPETAB     = self::GetAssignTable ( "`types`" , $argv , $Options       ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DISPs       = array                (                                    ) ;
  $COLs        = [ "id"       => "$(DISPLAY-COLUMN-ID)"                      ,
                   "uuid"     => "$(DISPLAY-COLUMN-UUID)"                    ,
                   "used"     => "$(DISPLAY-COLUMN-USED)"                    ,
                   "name"     => "$(DISPLAY-COLUMN-NAME)"                    ,
                   "head"     => "$(DISPLAY-COLUMN-HEAD)"                    ,
                   "digits"   => "$(DISPLAY-COLUMN-DIGITS)"                  ,
                   "ready"    => "$(DISPLAY-COLUMN-READY)"                   ,
                   "comment"  => "$(DISPLAY-COLUMN-COMMENT)"                 ,
                   "wiki"     => "$(DISPLAY-COLUMN-WIKI)"                    ,
                   "ltime"    => "$(DISPLAY-COLUMN-UPDATE)"                ] ;
  $KEYs        = array_keys           ( $COLs                              ) ;
  foreach                             ( $KEYs as $K                        ) {
    $S         = self::GetTag         ( $K , $argv                         ) ;
    $S         = strtolower           ( $S                                 ) ;
    $V         = $COLs                [ $K                                 ] ;
    $DISPs [ $V ] = ""                                                       ;
    if ( in_array ( $S , [ "false" , "no" , "hide" , "0" ] ) )               {
      $DISPs [ $V ] = "display: none;"                                       ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $ORDERBY     = "order by `id` asc"                                         ;
  $ORDERS      = self::GetTag         ( "order" , $argv                    ) ;
  if                                  ( strlen ( $ORDERS ) > 0             ) {
    $ORDERBY   = $ORDERS                                                     ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $WIKI        = $Options             [ "Configure" ] [ "item" ]             ;
  $Templates   = $Options             [ "Templates"                        ] ;
  $EXTENSION   = $Options             [ "AITK"                             ] ;
  $PATHX       = $Options             [ "Extension"                        ] ;
  ////////////////////////////////////////////////////////////////////////////
  $TEMPLFILE   = $Templates           [ "CIOS::Types::Columns"             ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  $COLUMNS     = file_get_contents    ( $TEMPLFILE                         ) ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMFILE    = $Templates           [ "CIOS::Types::Item"                ] ;
  $ITEMFILE    = "{$PATHX}/{$ITEMFILE}"                                      ;
  $TEMPL       = file_get_contents    ( $ITEMFILE                          ) ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMs       = array                (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ          = "select `id`,`uuid`,`used`,`name`,`head`,`digits`,`ready`,`comment`,`wiki`,`ltime`" .
                 " from {$TYPETAB}"                                          .
                 " where ( `used` > 0 )"                                     .
                 " {$ORDERBY} ;"                                             ;
  $qq          = $DBX -> Query        ( $QQ                                ) ;
  if                                  ( $DBX -> hasResult ( $qq )          ) {
    while ( $rr = $qq -> fetch_array ( MYSQLI_BOTH )                       ) {
      $MAPX    = array                                                       (
        "$(EXTENSION-PATH)"       =>   $EXTENSION                            ,
        "$(WIKI-PATH)"            =>   $WIKI                                 ,
        "$(CIOS-TYPE-DB)"         =>   $PICKDB                               ,
        "$(CIOS-TYPE-TABLE)"      =>   $TYPETAB                              ,
        "$(CIOS-TYPE-ID)"         =>   $rr [ 0 ]                             ,
        "$(CIOS-TYPE-UUID)"       =>   $rr [ 1 ]                             ,
        "$(CIOS-TYPE-USED)"       =>   $rr [ 2 ]                             ,
        "$(CIOS-TYPE-NAME)"       =>   $rr [ 3 ]                             ,
        "$(CIOS-TYPE-HEAD)"       =>   $rr [ 4 ]                             ,
        "$(CIOS-TYPE-DIGITS)"     =>   $rr [ 5 ]                             ,
        "$(CIOS-TYPE-READY)"      =>   $rr [ 6 ]                             ,
        "$(CIOS-TYPE-COMMENT)"    =>   $rr [ 7 ]                             ,
        "$(CIOS-TYPE-WIKI)"       =>   $rr [ 8 ]                             ,
        "$(CIOS-TYPE-UPDATE)"     =>   $rr [ 9 ]                             ,
      )                                                                      ;
      $KEYs    = array_keys               ( $DISPs                         ) ;
      foreach                             ( $KEYs as $K                    ) {
        $MAPX [ $K ] = $DISPs [ $K ]                                         ;
      }                                                                      ;
      $HTML    = Strings::ReplaceByKeys   ( $TEMPL , $MAPX                 ) ;
      array_push                          ( $ITEMs , $HTML                 ) ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMX       = implode              ( "\n" , $ITEMs                      ) ;
  $MAPS        = array                                                       (
    "$(EXTENSION-PATH)"       =>   $EXTENSION                                ,
    "$(WIKI-PATH)"            =>   $WIKI                                     ,
    "$(CIOS-TYPE-DB)"         =>   $PICKDB                                   ,
    "$(CIOS-TYPE-TABLE)"      =>   $TYPETAB                                  ,
    "$(CIOS-TYPE-LISTINGS)"   =>   $ITEMX                                    ,
  )                                                                          ;
  $KEYs        = array_keys           ( $DISPs                             ) ;
  foreach                             ( $KEYs as $K                        ) {
    $MAPS [ $K ] = $DISPs [ $K ]                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceByKeys       ( $COLUMNS , $MAPS                   ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTypeListings |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTypesEditor |+
// CIOS 物件類型編輯器
//////////////////////////////////////////////////////////////////////////////
public static function CiosTypesEditor ( $argv , $Content , $Options       ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST  = self::GetCurrentDB         ( $argv , $Options                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX         = new DB               (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PICKDB      = self::GetTag         ( "database" , $argv                 ) ;
  $TYPETAB     = self::GetAssignTable ( "`types`"  , $argv , $Options      ) ;
  $MINV        = self::GetTag         ( "min"      , $argv                 ) ;
  $MAXV        = self::GetTag         ( "max"      , $argv                 ) ;
  ////////////////////////////////////////////////////////////////////////////
  $USING       = self::GetTag         ( "using"    , $argv                 ) ;
  $USING       = strtolower           ( $USING                             ) ;
  $USESQL      = ""                                                          ;
  if ( in_array ( $USING , [ "true" , "yes" ] ) )                            {
    $USESQL    = " and ( `used` > 0 )"                                       ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DISPs       = array                (                                    ) ;
  $COLs        = [ "id"       => "$(DISPLAY-COLUMN-ID)"                      ,
                   "uuid"     => "$(DISPLAY-COLUMN-UUID)"                    ,
                   "used"     => "$(DISPLAY-COLUMN-USED)"                    ,
                   "name"     => "$(DISPLAY-COLUMN-NAME)"                    ,
                   "head"     => "$(DISPLAY-COLUMN-HEAD)"                    ,
                   "digits"   => "$(DISPLAY-COLUMN-DIGITS)"                  ,
                   "ready"    => "$(DISPLAY-COLUMN-READY)"                   ,
                   "comment"  => "$(DISPLAY-COLUMN-COMMENT)"                 ,
                   "wiki"     => "$(DISPLAY-COLUMN-WIKI)"                    ,
                   "ltime"    => "$(DISPLAY-COLUMN-UPDATE)"                ] ;
  $KEYs        = array_keys           ( $COLs                              ) ;
  foreach                             ( $KEYs as $K                        ) {
    $S         = self::GetTag         ( $K , $argv                         ) ;
    $S         = strtolower           ( $S                                 ) ;
    $V         = $COLs                [ $K                                 ] ;
    $DISPs [ $V ] = ""                                                       ;
    if ( in_array ( $S , [ "false" , "no" , "hide" , "0" ] ) )               {
      $DISPs [ $V ] = "display: none;"                                       ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $ORDERBY     = "order by `id` asc"                                         ;
  $ORDERS      = self::GetTag         ( "order" , $argv                    ) ;
  if                                  ( strlen ( $ORDERS ) > 0             ) {
    $ORDERBY   = $ORDERS                                                     ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $WIKI        = $Options             [ "Configure" ] [ "item" ]             ;
  $Templates   = $Options             [ "Templates"                        ] ;
  $EXTENSION   = $Options             [ "AITK"                             ] ;
  $PATHX       = $Options             [ "Extension"                        ] ;
  ////////////////////////////////////////////////////////////////////////////
  $TEMPLFILE   = $Templates           [ "CIOS::Types::Columns"             ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  $COLUMNS     = file_get_contents    ( $TEMPLFILE                         ) ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMFILE    = $Templates           [ "CIOS::Types::Editor"              ] ;
  $ITEMFILE    = "{$PATHX}/{$ITEMFILE}"                                      ;
  $TEMPL       = file_get_contents    ( $ITEMFILE                          ) ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMs       = array                (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ          = "select `id`,`uuid`,`used`,`name`,`head`,`digits`,`ready`,`comment`,`wiki`,`ltime`" .
                 " from {$TYPETAB}"                                          .
                 " where ( `id` >= {$MINV} )"                                .
                   " and ( `id` <= {$MAXV} )"                                .
                 "{$USESQL} {$ORDERBY} ;"                                    ;
  $qq          = $DBX -> Query        ( $QQ                                ) ;
  if                                  ( $DBX -> hasResult ( $qq )          ) {
    while ( $rr = $qq -> fetch_array ( MYSQLI_BOTH )                       ) {
      $MAPX    = array                                                       (
        "$(EXTENSION-PATH)"       =>   $EXTENSION                            ,
        "$(WIKI-PATH)"            =>   $WIKI                                 ,
        "$(CIOS-TYPE-DB)"         =>   $PICKDB                               ,
        "$(CIOS-TYPE-TABLE)"      =>   $TYPETAB                              ,
        "$(CIOS-TYPE-ID)"         =>   $rr [ 0 ]                             ,
        "$(CIOS-TYPE-UUID)"       =>   $rr [ 1 ]                             ,
        "$(CIOS-TYPE-USED)"       =>   $rr [ 2 ]                             ,
        "$(CIOS-TYPE-NAME)"       =>   $rr [ 3 ]                             ,
        "$(CIOS-TYPE-HEAD)"       =>   $rr [ 4 ]                             ,
        "$(CIOS-TYPE-DIGITS)"     =>   $rr [ 5 ]                             ,
        "$(CIOS-TYPE-READY)"      =>   $rr [ 6 ]                             ,
        "$(CIOS-TYPE-COMMENT)"    =>   $rr [ 7 ]                             ,
        "$(CIOS-TYPE-WIKI)"       =>   $rr [ 8 ]                             ,
        "$(CIOS-TYPE-UPDATE)"     =>   $rr [ 9 ]                             ,
      )                                                                      ;
      $KEYs    = array_keys               ( $DISPs                         ) ;
      foreach                             ( $KEYs as $K                    ) {
        $MAPX [ $K ] = $DISPs [ $K ]                                         ;
      }                                                                      ;
      $HTML    = Strings::ReplaceByKeys   ( $TEMPL , $MAPX                 ) ;
      array_push                          ( $ITEMs , $HTML                 ) ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMX       = implode              ( "\n" , $ITEMs                      ) ;
  $MAPS        = array                                                       (
    "$(EXTENSION-PATH)"       =>   $EXTENSION                                ,
    "$(WIKI-PATH)"            =>   $WIKI                                     ,
    "$(CIOS-TYPE-DB)"         =>   $PICKDB                                   ,
    "$(CIOS-TYPE-TABLE)"      =>   $TYPETAB                                  ,
    "$(CIOS-TYPE-LISTINGS)"   =>   $ITEMX                                    ,
  )                                                                          ;
  $KEYs        = array_keys           ( $DISPs                             ) ;
  foreach                             ( $KEYs as $K                        ) {
    $MAPS [ $K ] = $DISPs [ $K ]                                             ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                      (                                    ) ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceByKeys       ( $COLUMNS , $MAPS                   ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTypesEditor |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTypes |+
// CIOS 物件類型處理進入點
//////////////////////////////////////////////////////////////////////////////
public static function CiosTypes     ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Method      = self::GetTag        ( "method" , $argv                    ) ;
  $Method      = strtolower          ( $Method                             ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                             ( $Method                             ) {
    case "total"                                                             :
    return self::CiosTypeCounts      ( $argv , $Content , $Options         ) ;
    case "base"                                                              :
    return self::CiosTypeBase        ( $argv , $Content , $Options         ) ;
    case "max"                                                               :
    return self::CiosTypeMax         ( $argv , $Content , $Options         ) ;
    case "amount"                                                            :
    return self::CiosTypeAmount      ( $argv , $Content , $Options         ) ;
    case "listings"                                                          :
    return self::CiosTypeListings    ( $argv , $Content , $Options         ) ;
    case "editor"                                                            :
    return self::CiosTypesEditor     ( $argv , $Content , $Options         ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $argv                               ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTypes |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosTags |+
// CIOS Tags
//////////////////////////////////////////////////////////////////////////////
public static function CiosTags      ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Scope       = self::GetTag        ( "scope" , $argv                     ) ;
  $Scope       = strtolower          ( $Scope                              ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                             ( $Scope                              ) {
    case "types"                                                             :
    return self::CiosTypes           ( $argv , $Content , $Options         ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $argv                               ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosTags |-
//////////////////////////////////////////////////////////////////////////////
// +| CiosAJAX |+
// CIOS AJAX進入點
//////////////////////////////////////////////////////////////////////////////
public static function CiosAJAX      ( $DB , $PICKDB , $TABLE , $HH , $AA  ) {
  ////////////////////////////////////////////////////////////////////////////
  $METHOD      = $HH -> Parameter    ( "Method"                            ) ;
  $ID          = $HH -> Parameter    ( "Id"                                ) ;
  $COLUMN      = $HH -> Parameter    ( "Column"                            ) ;
  $VALUE       = $HH -> Parameter    ( "Value"                             ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                             ( $METHOD                             ) {
    case "Update"                                                            :
      $DB     -> LockWrites          ( [ $TABLE                          ] ) ;
      $QQ      = "update {$TABLE} set `{$COLUMN}` = ?"                       .
                 " where ( `id` = {$ID} ) ;"                                 ;
      $qq      = $DB -> Prepare      ( $QQ                                 ) ;
      $qq     -> bind_param          ( 's' , $VALUE                        ) ;
      $qq     -> execute             (                                     ) ;
      $DB     -> UnlockTables        (                                     ) ;
    break                                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Answer" ] = "Yes"                                                   ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| CiosAJAX |-
//////////////////////////////////////////////////////////////////////////////
// +| Ethnologue |+
// 民族語
//////////////////////////////////////////////////////////////////////////////
public static function Ethnologue    ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode                 ( $Options                            ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| Ethnologue |-
//////////////////////////////////////////////////////////////////////////////
// +| HtPwdListings |+
// HtPassword Listings
//////////////////////////////////////////////////////////////////////////////
public static function HtPwdListings   ( $ID                                 ,
                                         $HTPASSWD                           ,
                                         $FILE                               ,
                                         $LANG                               ,
                                         $WIDTH                              ,
                                         $APPEND                             ,
                                         $DELETE                           ) {
  ////////////////////////////////////////////////////////////////////////////
  $canAppend    = strtolower           ( $APPEND                           ) ;
  $DISPAPPEND   = ""                                                         ;
  if ( in_array ( $canAppend , [ "yes" , "true" ] ) )                        {
    $canAppend  = true                                                       ;
  } else                                                                     {
    $canAppend  = false                                                      ;
    $DISPAPPEND = "display: none;"                                           ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $canDelete    = strtolower           ( $DELETE                           ) ;
  if ( in_array ( $canDelete , [ "yes" , "true" ] ) )                        {
    $canDelete  = true                                                       ;
  } else                                                                     {
    $canDelete  = false                                                      ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $ACCOUNTS     = file_get_contents    ( $FILE                             ) ;
  $ACCTS        = explode              ( "\n" , $ACCOUNTS                  ) ;
  $LISTS        = array                (                                   ) ;
  foreach                              ( $ACCTS as $act                    ) {
    if                                 ( strlen ( $act ) > 0               ) {
      $LL       = explode              ( ":" , $act                        ) ;
      if                               ( count ( $LL ) > 1                 ) {
        array_push                     ( $LISTS , $LL [ 0 ]                ) ;
      }                                                                      ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $LINES        = array                (                                   ) ;
  if                                   ( count ( $LISTS ) > 0              ) {
    //////////////////////////////////////////////////////////////////////////
    $TITLE      = "<tr>"                                                     .
                  "<td colspan=2 id='AccountTitle'>"                         .
                  "Accounts"                                                 .
                  "</td>"                                                    .
                  "</tr>"                                                    ;
    $SPACE      = "<tr><td colspan=2>&nbsp;</td></tr>"                       ;
    //////////////////////////////////////////////////////////////////////////
    array_push                         ( $LINES , $TITLE                   ) ;
    array_push                         ( $LINES , $SPACE                   ) ;
    //////////////////////////////////////////////////////////////////////////
    foreach                            ( $LISTS as $L                      ) {
      $JSC      = "DeleteHtUser('{$L}');"                                    ;
      $ATDX     = "<td class='AccountCell'>{$L}</td>"                        ;
      $IMGC     = ""                                                         ;
      if                               ( $canDelete                        ) {
        $IMGX   = "<i class='fas fa-trash'></i>"                             ;
        $IMGC   = "<button"                                                  .
                  " class='btn-sm btn-warning'"                              .
                  " onclick=\"{$JSC}\">{$IMGX}</button>"                     ;
      }                                                                      ;
      $ATIM     = "<td"                                                      .
                  " nowrap='nowrap'"                                         .
                  " width='1%'"                                              .
                  " class='AccountCell'>"                                    .
                  "{$IMGC}"                                                  .
                  "</td>"                                                    ;
      $LINE     = "<tr>\n{$ATIM}\n{$ATDX}\n</tr>"                            ;
      array_push                       ( $LINES , $LINE                    ) ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
    array_push                         ( $LINES , $SPACE                   ) ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(ACCOUNT-LISTINGS)"  => implode   ( "" , $LINES                      ) ,
    "$(PASSWORD-ID)"       => $ID                                            ,
    "$(PASSWORD-ROOT)"     => $HTPASSWD                                      ,
    "$(PASSWORD-FILE)"     => $FILE                                          ,
    "$(PASSWORD-LANGUAGE)" => $LANG                                          ,
    "$(PASSWORD-WIDTH)"    => $WIDTH                                         ,
    "$(PASSWORD-APPEND)"   => $APPEND                                        ,
    "$(PASSWORD-DELETE)"   => $DELETE                                        ,
    "$(DISPLAY-APPEND)"    => $DISPAPPEND                                    ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys    ( $HTPASSWD , $MAPS                 ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| HtPwdListings |-
//////////////////////////////////////////////////////////////////////////////
// +| AppendHtPassword |+
//////////////////////////////////////////////////////////////////////////////
public static function AppendHtPassword ( $DB                                ,
                                          $PICKDB                            ,
                                          $HH                                ,
                                          $AA                                ,
                                          $Options                         ) {
  ////////////////////////////////////////////////////////////////////////////
  $PROGRAM  = $Options [ "Configure" ] [ "htpasswd" ]                        ;
  $ID       = $HH -> Parameter ( "ID"                                      ) ;
  $HTPASSWD = $HH -> Parameter ( "Root"                                    ) ;
  $LANG     = $HH -> Parameter ( "Language"                                ) ;
  $FILE     = $HH -> Parameter ( "File"                                    ) ;
  $WIDTH    = $HH -> Parameter ( "Width"                                   ) ;
  $APPEND   = $HH -> Parameter ( "Append"                                  ) ;
  $DELETE   = $HH -> Parameter ( "Delete"                                  ) ;
  $ACCOUNT  = $HH -> Parameter ( "Account"                                 ) ;
  $PASSWD   = $HH -> Parameter ( "Password"                                ) ;
  $AGAIN    = $HH -> Parameter ( "Again"                                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  $EXECHT   = "{$PROGRAM} -mb {$FILE} {$ACCOUNT} {$PASSWD}"                  ;
  exec                                 ( $EXECHT                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $HT       = self::HtPwdListings      ( $ID                                 ,
                                         $HTPASSWD                           ,
                                         $FILE                               ,
                                         $LANG                               ,
                                         $WIDTH                              ,
                                         $APPEND                             ,
                                         $DELETE                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Message" ] = $HT                                                    ;
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| AppendHtPassword |-
//////////////////////////////////////////////////////////////////////////////
// +| DeleteHtPassword |+
//////////////////////////////////////////////////////////////////////////////
public static function DeleteHtPassword ( $DB                                ,
                                          $PICKDB                            ,
                                          $HH                                ,
                                          $AA                                ,
                                          $Options                         ) {
  ////////////////////////////////////////////////////////////////////////////
  $PROGRAM  = $Options [ "Configure" ] [ "htpasswd" ]                        ;
  $ID       = $HH -> Parameter ( "ID"                                      ) ;
  $HTPASSWD = $HH -> Parameter ( "Root"                                    ) ;
  $LANG     = $HH -> Parameter ( "Language"                                ) ;
  $FILE     = $HH -> Parameter ( "File"                                    ) ;
  $WIDTH    = $HH -> Parameter ( "Width"                                   ) ;
  $APPEND   = $HH -> Parameter ( "Append"                                  ) ;
  $DELETE   = $HH -> Parameter ( "Delete"                                  ) ;
  $ACCOUNT  = $HH -> Parameter ( "Account"                                 ) ;
  $PASSWD   = $HH -> Parameter ( "Password"                                ) ;
  $AGAIN    = $HH -> Parameter ( "Again"                                   ) ;
  ////////////////////////////////////////////////////////////////////////////
  $EXECHT   = "{$PROGRAM} -D {$FILE} {$ACCOUNT}"                             ;
  exec                                 ( $EXECHT                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $HT       = self::HtPwdListings      ( $ID                                 ,
                                         $HTPASSWD                           ,
                                         $FILE                               ,
                                         $LANG                               ,
                                         $WIDTH                              ,
                                         $APPEND                             ,
                                         $DELETE                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Message" ] = $HT                                                    ;
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| DeleteHtPassword |-
//////////////////////////////////////////////////////////////////////////////
// +| HtPassword |+
// HtPassword
//////////////////////////////////////////////////////////////////////////////
public static function HtPassword      ( $args , $argv , $Options          ) {
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( $args < 2                         ) {
    return ""                                                                ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $FILE        = $argv    [ 1           ]                                    ;
  $ROOT        = $Options [ "Wiki"      ]                                    ;
  $AITK        = $Options [ "Extension" ]                                    ;
  $FILE        = "{$ROOT}{$FILE}"                                            ;
  ////////////////////////////////////////////////////////////////////////////
  $LANG        = "zh-TW"                                                     ;
  $WIDTH       = "100%"                                                      ;
  $canAppend   = "Yes"                                                       ;
  $canDelete   = "Yes"                                                       ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( $args > 2                         ) {
    $LANG      = $argv [ 2 ]                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( $args > 3                         ) {
    $WIDTH     = $argv [ 3 ]                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( $args > 4                         ) {
    $canAppend = $argv [ 4 ]                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( $args > 5                         ) {
    $canDelete = $argv [ 5 ]                                                 ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options   [ "Templates"                                  ] ;
  $HTPASSWD    = $Templates [ "HtPassword::Directory"                      ] ;
  $HTPASSWD    = "{$AITK}/{$HTPASSWD}{$LANG}.html"                           ;
  $ID          = self::RandomString    ( "HtPassword-" , 20                ) ;
  $LST         = self::HtPwdListings   ( $ID                                 ,
                                         $HTPASSWD                           ,
                                         $FILE                               ,
                                         $LANG                               ,
                                         $WIDTH                              ,
                                         $canAppend                          ,
                                         $canDelete                        ) ;
  ////////////////////////////////////////////////////////////////////////////
  return "<div id='{$ID}'>{$LST}</div>"                                      ;
}
//////////////////////////////////////////////////////////////////////////////
// +| HtPassword |+
//////////////////////////////////////////////////////////////////////////////
// +| HtPasswd |+
// 網站密碼
//////////////////////////////////////////////////////////////////////////////
public static function HtPasswd      ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $IDX         = self::GetTag        ( "id"         , $argv                ) ;
  $FILE        = self::GetTag        ( "filename"   , $argv                ) ;
  $LANGX       = self::GetTag        ( "language"   , $argv                ) ;
  $WIDTHX      = self::GetTag        ( "width"      , $argv                ) ;
  $APPENDX     = self::GetTag        ( "appendable" , $argv                ) ;
  $DELETEX     = self::GetTag        ( "deletable"  , $argv                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $ROOT        = $Options [ "Wiki"      ]                                    ;
  $AITK        = $Options [ "Extension" ]                                    ;
  $FILE        = "{$ROOT}{$FILE}"                                            ;
  ////////////////////////////////////////////////////////////////////////////
  $LANG        = "zh-TW"                                                     ;
  $WIDTH       = "100%"                                                      ;
  $canAppend   = "Yes"                                                       ;
  $canDelete   = "Yes"                                                       ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( strlen ( $LANGX   ) > 0           ) {
    $LANG      = $LANGX                                                      ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( strlen ( $WIDTHX  ) > 0           ) {
    $WIDTH     = $WIDTHX                                                     ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( strlen ( $APPENDX ) > 0           ) {
    $canAppend = $APPENDX                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( strlen ( $DELETEX ) > 0           ) {
    $canDelete = $DELETEX                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options   [ "Templates"                                  ] ;
  $HTPASSWD    = $Templates [ "HtPassword::Directory"                      ] ;
  $HTPASSWD    = "{$AITK}/{$HTPASSWD}{$LANG}.html"                           ;
  $ID          = self::RandomString    ( "HtPassword-" , 20                ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                                   ( strlen ( $IDX ) > 0               ) {
    $ID        = $IDX                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $LST         = self::HtPwdListings   ( $ID                                 ,
                                         $HTPASSWD                           ,
                                         $FILE                               ,
                                         $LANG                               ,
                                         $WIDTH                              ,
                                         $canAppend                          ,
                                         $canDelete                        ) ;
  ////////////////////////////////////////////////////////////////////////////
  return "<div id='{$ID}'>{$LST}</div>"                                      ;
}
//////////////////////////////////////////////////////////////////////////////
// -| HtPasswd |-
//////////////////////////////////////////////////////////////////////////////
// -| DoMinifier |-
// 對JS/CSS進行簡化
//////////////////////////////////////////////////////////////////////////////
public static function DoMinifier  ( $DB , $PICKDB , $HH , $AA , $Options  ) {
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Answer" ] = "No"                                                    ;
  ////////////////////////////////////////////////////////////////////////////
  $MSG       = ""                                                            ;
  $TYPE      = $HH -> Parameter    ( "Type"                                ) ;
  $CONTENT   = $HH -> Parameter    ( "Content"                             ) ;
  ////////////////////////////////////////////////////////////////////////////
  $TYPE      = strtolower          ( $TYPE                                 ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                           ( $TYPE                                 ) {
    //////////////////////////////////////////////////////////////////////////
    case "js"                                                                :
      $DOMX  = new Minify\JS       (                                       ) ;
      $DOMX -> add                 ( $CONTENT                              ) ;
      $MSG   = $DOMX -> minify     (                                       ) ;
    break                                                                    ;
    //////////////////////////////////////////////////////////////////////////
    case "css"                                                               :
      $DOMX  = new Minify\CSS      (                                       ) ;
      $DOMX -> add                 ( $CONTENT                              ) ;
      $MSG   = $DOMX -> minify     (                                       ) ;
    break                                                                    ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Message" ] = $MSG                                                   ;
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| DoMinifier |-
//////////////////////////////////////////////////////////////////////////////
// +| Minifier |+
// JS/CSS語法簡化器
//////////////////////////////////////////////////////////////////////////////
public static function Minifier      ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Id          = self::GetTag        ( "id"        , $argv                 ) ;
  $TYPE        = self::GetTag        ( "type"      , $argv                 ) ;
  $TYPE        = strtolower          ( $TYPE                               ) ;
  $MIME        = ""                                                          ;
  $Label       = "Update"                                                    ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options            [ "Templates"                         ] ;
  ////////////////////////////////////////////////////////////////////////////
  if                                 ( strlen ( $Id ) <= 0                 ) {
    $Id        = self::RandomString  ( "File-" , 24                        ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $EXTENSION   = $Options            [ "AITK"                              ] ;
  $PATHX       = $Options            [ "Extension"                         ] ;
  $TEMPLFILE   = $Templates          [ "Minifier::Editor"                  ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $PARAMETERS  = array               (                                     ) ;
  $KEYs        = array_keys          ( $argv                               ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                            ( $KEYs as $K                         ) {
    //////////////////////////////////////////////////////////////////////////
    $S         = strtolower          ( $K                                  ) ;
    //////////////////////////////////////////////////////////////////////////
    switch                           ( $S                                  ) {
      case "function"                                                        :
      case "id"                                                              :
      case "type"                                                            :
      break                                                                  ;
      case "label"                                                           :
        $Label = self::GetTag        ( $K , $argv                          ) ;
      break                                                                  ;
      default                                                                :
        $V     = self::GetTag        ( $K , $argv                          ) ;
        array_push                   ( $PARAMETERS , "{$K}='{$V}'"         ) ;
      break                                                                  ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PARMS       = ""                                                          ;
  if                                 ( count ( $PARAMETERS ) > 0           ) {
    $PARMS     = implode             ( " " , $PARAMETERS                   ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  switch                             ( $TYPE                               ) {
    case "js"                                                                :
      $MIME    = "application/javascript"                                    ;
    break                                                                    ;
    case "css"                                                               :
      $MIME    = "text/css"                                                  ;
    break                                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(EDITOR-ID)"           =>   $Id                                        ,
    "$(BUTTON-LABEL)"        =>   $Label                                     ,
    "$(EDITOR-PARAMETERS)"   =>   $PARMS                                     ,
    "$(MINIFIER-TYPE)"       =>   $TYPE                                      ,
    "$(MINIFIER-MIME)"       =>   $MIME                                      ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys  ( $TEMPLFILE , $MAPS                  ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| Minifier |-
//////////////////////////////////////////////////////////////////////////////
// +| ReadParagraph |+
// 讀取檔案
//////////////////////////////////////////////////////////////////////////////
public static function ReadParagraph  ( $DB                                  ,
                                        $PICKDB                              ,
                                        $HH                                  ,
                                        $AA                                  ,
                                        $Options                           ) {
  ////////////////////////////////////////////////////////////////////////////
  $DELIMITER = $HH -> Parameter       ( "Delimiter"                        ) ;
  $PARAGRAPH = $HH -> Parameter       ( "Paragraph"                        ) ;
  $FILENAME  = $HH -> Parameter       ( "Filename"                         ) ;
  $TEXT      = file_get_contents      ( $FILENAME                          ) ;
  if                                  ( ! $TEXT                            ) {
    $TEXT    = ""                                                            ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TOP       = "{$DELIMITER} +| {$PARAGRAPH} |+"                             ;
  $LTOP      = strlen                 ( $TOP                               ) ;
  ////////////////////////////////////////////////////////////////////////////
  $BOTTOM    = "{$DELIMITER} -| {$PARAGRAPH} |-"                             ;
  $LBOTTOM   = strlen                 ( $BOTTOM                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  $MATCHED   = false                                                         ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMs     = explode                ( "\n" , $TEXT                       ) ;
  $LINES     = array                  (                                    ) ;
  foreach                             ( $ITEMs as $L                       ) {
    //////////////////////////////////////////////////////////////////////////
    $FTOP    = substr                 ( $L , 0 , $LTOP                     ) ;
    $FBOTTOM = substr                 ( $L , 0 , $LBOTTOM                  ) ;
    //////////////////////////////////////////////////////////////////////////
    if                                ( $FTOP    == $TOP                   ) {
      $MATCHED = true                                                        ;
    } else
    if                                ( $FBOTTOM == $BOTTOM                ) {
      $MATCHED = false                                                       ;
    } else                                                                   {
      if                              ( $MATCHED                           ) {
        array_push                    ( $LINES , $L                        ) ;
      }                                                                      ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Message" ] = implode         ( "\n" , $LINES                      ) ;
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ReadParagraph |-
//////////////////////////////////////////////////////////////////////////////
// +| WriteParagraph |+
// 寫入段落
//////////////////////////////////////////////////////////////////////////////
public static function WriteParagraph ( $DB                                  ,
                                        $PICKDB                              ,
                                        $HH                                  ,
                                        $AA                                  ,
                                        $Options                           ) {
  ////////////////////////////////////////////////////////////////////////////
  $PART      = $HH -> Parameter       ( "Text"                             ) ;
  $DELIMITER = $HH -> Parameter       ( "Delimiter"                        ) ;
  $PARAGRAPH = $HH -> Parameter       ( "Paragraph"                        ) ;
  $FILENAME  = $HH -> Parameter       ( "Filename"                         ) ;
  $TEXT      = file_get_contents      ( $FILENAME                          ) ;
  if                                  ( ! $TEXT                            ) {
    $TEXT    = ""                                                            ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TZ        = $Options               [ "Configure" ] [ "timezone" ]         ;
  $NOW       = new StarDate           (                                    ) ;
  $NOW      -> Now                    (                                    ) ;
  $TODAY     = $NOW -> toDateTimeString ( $TZ , "T" , "Y-m-d" , "H:i:s"    ) ;
  ////////////////////////////////////////////////////////////////////////////
  $TOP       = "{$DELIMITER} +| {$PARAGRAPH} |+"                             ;
  $RTOP      = "{$TOP} Begin - {$TODAY}"                                     ;
  $LTOP      = strlen                 ( $TOP                               ) ;
  ////////////////////////////////////////////////////////////////////////////
  $BOTTOM    = "{$DELIMITER} -| {$PARAGRAPH} |-"                             ;
  $RBOTTOM   = "{$BOTTOM} Final - {$TODAY}"                                  ;
  $LBOTTOM   = strlen                 ( $BOTTOM                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  $MATCHED   = false                                                         ;
  ////////////////////////////////////////////////////////////////////////////
  $ITEMs     = explode                ( "\n" , $TEXT                       ) ;
  $LINES     = array                  (                                    ) ;
  foreach                             ( $ITEMs as $L                       ) {
    //////////////////////////////////////////////////////////////////////////
    $FTOP    = substr                 ( $L , 0 , $LTOP                     ) ;
    $FBOTTOM = substr                 ( $L , 0 , $LBOTTOM                  ) ;
    //////////////////////////////////////////////////////////////////////////
    if                                ( $FTOP    == $TOP                   ) {
      $MATCHED = true                                                        ;
      array_push                      ( $LINES , $RTOP                     ) ;
      array_push                      ( $LINES , $PART                     ) ;
    } else
    if                                ( $FBOTTOM == $BOTTOM                ) {
      $MATCHED = false                                                       ;
      array_push                      ( $LINES , $RBOTTOM                  ) ;
    } else                                                                   {
      if                              ( ! $MATCHED                         ) {
        array_push                    ( $LINES , $L                        ) ;
      }                                                                      ;
    }                                                                        ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $CONTENT   = implode                ( "\n" , $LINES                      ) ;
  ////////////////////////////////////////////////////////////////////////////
  $fhandle   = fopen                  ( $FILENAME , "w+"                   ) ;
  fwrite                              ( $fhandle  , $CONTENT               ) ;
  fclose                              ( $fhandle                           ) ;
  ////////////////////////////////////////////////////////////////////////////
  $AA [ "Answer"  ] = "Yes"                                                  ;
  ////////////////////////////////////////////////////////////////////////////
  return $AA                                                                 ;
}
//////////////////////////////////////////////////////////////////////////////
// -| WriteParagraph |-
//////////////////////////////////////////////////////////////////////////////
// +| ParagraphUI |+
// 段落編輯器
//////////////////////////////////////////////////////////////////////////////
public static function ParagraphUI   ( $argv , $Content , $Options         ) {
  ////////////////////////////////////////////////////////////////////////////
  $Id          = self::GetTag        ( "id"        , $argv                 ) ;
  $Filename    = self::GetTag        ( "filename"  , $argv                 ) ;
  $Directory   = self::GetTag        ( "directory" , $argv                 ) ;
  $Delimiter   = self::GetTag        ( "delimiter" , $argv                 ) ;
  $Paragraph   = self::GetTag        ( "paragraph" , $argv                 ) ;
  $Original    = $Filename                                                   ;
  $Label       = "Update"                                                    ;
  ////////////////////////////////////////////////////////////////////////////
  $Templates   = $Options            [ "Templates"                         ] ;
  $DIRs        = $Options            [ "Directory"                         ] ;
  ////////////////////////////////////////////////////////////////////////////
  if ( ! array_key_exists ( $Directory , $DIRs ) )                           {
    $Directory = "Default"                                                   ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DIRPATH     = $DIRs               [ $Directory                          ] ;
  $LOCALFILE   = "{$DIRPATH}/{$Filename}"                                    ;
  ////////////////////////////////////////////////////////////////////////////
  if                                 ( strlen ( $Content ) > 0             ) {
    $Original  = $Content                                                    ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  if                                 ( strlen ( $Id ) <= 0                 ) {
    $Id        = self::RandomString  ( "File-" , 24                        ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $EXTENSION   = $Options            [ "AITK"                              ] ;
  $PATHX       = $Options            [ "Extension"                         ] ;
  $TEMPLFILE   = $Templates          [ "Paragraph::Editor"                 ] ;
  $TEMPLFILE   = "{$PATHX}/{$TEMPLFILE}"                                     ;
  ////////////////////////////////////////////////////////////////////////////
  $READONLY    = ""                                                          ;
  $PARAMETERS  = array               (                                     ) ;
  $KEYs        = array_keys          ( $argv                               ) ;
  ////////////////////////////////////////////////////////////////////////////
  foreach                            ( $KEYs as $K                         ) {
    //////////////////////////////////////////////////////////////////////////
    $S         = strtolower          ( $K                                  ) ;
    //////////////////////////////////////////////////////////////////////////
    switch                           ( $S                                  ) {
      case "function"                                                        :
      case "id"                                                              :
      case "filename"                                                        :
      case "directory"                                                       :
      case "delimiter"                                                       :
      case "paragraph"                                                       :
      break                                                                  ;
      case "label"                                                           :
        $Label = self::GetTag        ( $K , $argv                          ) ;
      break                                                                  ;
      case "readonly"                                                        :
        $RO    = self::GetTag        ( $K , $argv                          ) ;
        $RO    = strtolower          ( $RO                                 ) ;
        if ( ( strlen ( $RO ) <= 0 )                                        ||
             ( in_array ( $RO , [ "true" , "yes" ] ) )                     ) {
          $READONLY = "display: none;"                                       ;
        }                                                                    ;
      default                                                                :
        $V     = self::GetTag        ( $K , $argv                          ) ;
        array_push                   ( $PARAMETERS , "{$K}='{$V}'"         ) ;
      break                                                                  ;
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $PARMS       = ""                                                          ;
  if                                 ( count ( $PARAMETERS ) > 0           ) {
    $PARMS     = implode             ( " " , $PARAMETERS                   ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $MAPS        = array                                                       (
    "$(EDITOR-ID)"           =>   $Id                                        ,
    "$(BUTTON-LABEL)"        =>   $Label                                     ,
    "$(EDITOR-LABEL)"        =>   $Original                                  ,
    "$(EDITOR-PARAMETERS)"   =>   $PARMS                                     ,
    "$(EDITOR-DIRECTORY)"    =>   $Directory                                 ,
    "$(EDITOR-PATH)"         =>   $DIRPATH                                   ,
    "$(EDITOR-FILENAME)"     =>   $Filename                                  ,
    "$(EDITOR-LOCALFILE)"    =>   $LOCALFILE                                 ,
    "$(EDITOR-READONLY)"     =>   $READONLY                                  ,
    "$(EDITOR-DELIMITER)"    =>   $Delimiter                                 ,
    "$(EDITOR-PARAGRAPH)"    =>   $Paragraph                                 ,
  )                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return Strings::ReplaceFileByKeys  ( $TEMPLFILE , $MAPS                  ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ParagraphUI |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsBooks |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsBooks   ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsBooks |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsTheme |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsTheme   ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsTheme |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsFile |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsFile    ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsFile |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsDirectory |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsDirectory ( $argv , $Content , $Options      ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsDirectory |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsPicture |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsPicture   ( $argv , $Content , $Options      ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsPicture |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsAvatar |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsAvatar    ( $argv , $Content , $Options      ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsAvatar |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsIcon |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsIcon      ( $argv , $Content , $Options      ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsIcon |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsSettings |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsSettings      ( $argv , $Content , $Options      ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsSettings |-
//////////////////////////////////////////////////////////////////////////////
// +| ActionsYouTube |+
//////////////////////////////////////////////////////////////////////////////
public static function ActionsYouTube       ( $argv , $Content , $Options  ) {
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| ActionsYouTube |-
//////////////////////////////////////////////////////////////////////////////
// +| EarthVelocity |+
// 地球速度
//////////////////////////////////////////////////////////////////////////////
public static function EarthVelocity ( $Distance )                           {
  ////////////////////////////////////////////////////////////////////////////
  $MU  = "132749350000000000000"                                             ;
  $AUS = "149597870700"                                                      ;
  $DAU = gmp_mul  ( $AUS , 2         )                                       ;
  $RAX = gmp_mul  ( $AUS , $Distance )                                       ;
  $DAU = gmp_sub  ( $DAU , $Distance )                                       ;
  $DAU = gmp_mul  ( $DAU , $MU       )                                       ;
  $DAU = gmp_div  ( $DAU , $RAX      )                                       ;
  ////////////////////////////////////////////////////////////////////////////
  return gmp_sqrt ( $DAU             )                                       ;
}
//////////////////////////////////////////////////////////////////////////////
// -| EarthVelocity |-
//////////////////////////////////////////////////////////////////////////////
// +| EarthApsides |+
// 地球模擬
//////////////////////////////////////////////////////////////////////////////
public static function EarthApsides   ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $HOST      = self::GetCurrentDB     ( $argv , $Options                   ) ;
  $DBX       = new DB                 (                                    ) ;
  if                                  ( ! $DBX -> Connect ( $HOST )        ) {
    return $DBX -> ConnectionError    (                                    ) ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $TZS       = self::GetTag           ( "timezone"  , $argv                ) ;
  if                                  ( strlen ( $TZS ) <= 0               ) {
    $TZS     = "UTC"                                                         ;
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $Helions   = "`astronomy`.`earth-helions`"                                 ;
  $Sidereal  = 31558150                                                      ;
  $AU        = 149597870700                                                  ;
  $MU        = "132749350000000000000"                                       ;
  $AUS       = "149597870700"                                                ;
  ////////////////////////////////////////////////////////////////////////////
  $TABLE     = new Html                  (                                 ) ;
  $TBODY     = $TABLE -> ConfigureTable  ( 1 , 1 , 1                       ) ;
  $TBODY    -> setSplitter               ( "\n"                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  $HR        = $TBODY -> addTr           (                                 ) ;
  $HD        = $HR    -> addTd           ( $Content                        ) ;
  $HD       -> AddPair                   ( "colspan" , "9"                 ) ;
  ////////////////////////////////////////////////////////////////////////////
  $TZSTR     = "Time Zone : {$TZS}"                                          ;
  $HR        = $TBODY -> addTr           (                                 ) ;
  $HD        = $HR    -> addTd           ( $TZSTR                          ) ;
  $HD       -> AddPair                   ( "colspan" , "9"                 ) ;
  ////////////////////////////////////////////////////////////////////////////
  $HR        = $TBODY -> addTr           (                                 ) ;
  $HD        = $HR    -> addTd           ( "Year"                          ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Perihelion"                    ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Distance"                      ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Sidereal error"                ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Velocity"                      ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Aphelion"                      ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Distance"                      ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Sidereal error"                ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  $HD        = $HR    -> addTd           ( "Velocity"                      ) ;
  $HD       -> AddPair                   ( "align" , "center"              ) ;
  ////////////////////////////////////////////////////////////////////////////
  $QQ        = "select `year`,`perihelion`,`peridistance`,`aphelion`,`apdistance`" .
               " from {$Helions} order by id asc ;"                          ;
  $qq        = $DBX -> Query             ( $QQ                             ) ;
  ////////////////////////////////////////////////////////////////////////////
  if                                     ( $DBX -> hasResult ( $qq )       ) {
    //////////////////////////////////////////////////////////////////////////
    $PDT     = new StarDate              (                                 ) ;
    $ADT     = new StarDate              (                                 ) ;
    $IDP     = 0                                                             ;
    $LPERI   = 0                                                             ;
    $LAPHE   = 0                                                             ;
    //////////////////////////////////////////////////////////////////////////
    while ( $rr = $qq -> fetch_array ( MYSQLI_BOTH ) )                       {
      ////////////////////////////////////////////////////////////////////////
      $YEAR         = $rr [ 0 ]                                              ;
      $Perihelion   = $rr [ 1 ]                                              ;
      $PeriDistance = $rr [ 2 ]                                              ;
      $Aphelion     = $rr [ 3 ]                                              ;
      $ApDistance   = $rr [ 4 ]                                              ;
      ////////////////////////////////////////////////////////////////////////
      $VPERI        = self::EarthVelocity ( $PeriDistance )                  ;
      $VAPHD        = self::EarthVelocity ( $ApDistance   )                  ;
      ////////////////////////////////////////////////////////////////////////
      $PERR         = ""                                                     ;
      $AERR         = ""                                                     ;
      ////////////////////////////////////////////////////////////////////////
      if                       ( $IDP > 0                                  ) {
        $PERR = $Perihelion - $LPERI - $Sidereal                             ;
        $AERR = $Aphelion   - $LAPHE - $Sidereal                             ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
      $PDT  -> Stardate = $Perihelion                                        ;
      $ADT  -> Stardate = $Aphelion                                          ;
      ////////////////////////////////////////////////////////////////////////
      $PDS   = $PDT -> toDateTimeString ( $TZS , " " , "Y/m/d" , "H:i:s"   ) ;
      $ADS   = $ADT -> toDateTimeString ( $TZS , " " , "Y/m/d" , "H:i:s"   ) ;
      ////////////////////////////////////////////////////////////////////////
      $HR    = $TBODY -> addTr (                                           ) ;
      $HD    = $HR    -> addTd ( $YEAR                                     ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $PDS                                      ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $PeriDistance                             ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $PERR                                     ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $VPERI                                    ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $ADS                                      ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $ApDistance                               ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $AERR                                     ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      $HD    = $HR    -> addTd ( $VAPHD                                    ) ;
      $HD   -> AddPair         ( "align" , "right"                         ) ;
      ////////////////////////////////////////////////////////////////////////
      $LPERI = $Perihelion                                                   ;
      $LAPHE = $Aphelion                                                     ;
      ////////////////////////////////////////////////////////////////////////
      $IDP   = $IDP + 1                                                      ;
      ////////////////////////////////////////////////////////////////////////
    }                                                                        ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  $DBX  -> Close                         (                                 ) ;
  ////////////////////////////////////////////////////////////////////////////
  return $TABLE -> Content               (                                 ) ;
}
//////////////////////////////////////////////////////////////////////////////
// -| EarthApsides |-
//////////////////////////////////////////////////////////////////////////////
// +| Earth |+
// 地球模擬
//////////////////////////////////////////////////////////////////////////////
public static function Earth          ( $argv , $Content , $Options        ) {
  ////////////////////////////////////////////////////////////////////////////
  $PROPERTY    = self::GetTag         ( "property"  , $argv                ) ;
  $PARAMETER   = self::GetTag         ( "parameter" , $argv                ) ;
  $METHOD      = self::GetTag         ( "method"    , $argv                ) ;
  ////////////////////////////////////////////////////////////////////////////
  $PROPERTY    = strtolower           ( $PROPERTY                          ) ;
  $PARAMETER   = strtolower           ( $PARAMETER                         ) ;
  $METHOD      = strtolower           ( $METHOD                            ) ;
  ////////////////////////////////////////////////////////////////////////////
  switch                              ( $PROPERTY                          ) {
    //////////////////////////////////////////////////////////////////////////
    case "orbit"                                                             :
      ////////////////////////////////////////////////////////////////////////
      switch                          ( $PARAMETER                         ) {
        case "apsides"                                                       :
          if                          ( $METHOD == "table"                 ) {
            return self::EarthApsides ( $argv , $Content , $Options        ) ;
          }                                                                  ;
        break                                                                ;
      }                                                                      ;
      ////////////////////////////////////////////////////////////////////////
    break                                                                    ;
    //////////////////////////////////////////////////////////////////////////
  }                                                                          ;
  ////////////////////////////////////////////////////////////////////////////
  return ""                                                                  ;
}
//////////////////////////////////////////////////////////////////////////////
// -| Earth |-
//////////////////////////////////////////////////////////////////////////////
// +| RPC |+
// 遠端程序控制
//////////////////////////////////////////////////////////////////////////////
public static function RPC ( $argv , $Content , $Options                   ) {
  ////////////////////////////////////////////////////////////////////////////
  return json_encode       ( $argv                                         ) ;
  ////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
// -| RPC |-
//////////////////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////////////////
?>
